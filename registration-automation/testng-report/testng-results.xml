<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="188" passed="188">
  <reporter-output>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: PCC-PUS-011 --> Packet id can not be empty or null
	at io.mosip.registration.service.packet.impl.PacketSynchServiceImpl.packetSync(PacketSynchServiceImpl.java:309)
	at io.mosip.registration.test.PacketSyncServiceTest.validateSyncPacketsToServer(PacketSyncServiceTest.java:214)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.JobConfigurationTest.startSchedulerTest(JobConfigurationTest.java:102)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.JobConfigurationTest.stopSchedulerTest(JobConfigurationTest.java:162)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[Exception : PCC-NSI-002 --> Message and Email can not be null]]>
    </line>
    <line>
      <![CDATA[Exception : PCC-NSI-002 --> Message and Email can not be null]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(LoginServiceRegCenterDetailTest.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(LoginServiceRegCenterDetailTest.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(LoginServiceRegCenterDetailTest.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-002 --> master sync service language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.getAllBlackListedWords(MasterSyncServiceImpl.java:335)
	at io.mosip.registration.test.MasterSyncBlackListedWord.verifyBlackListedWords(MasterSyncBlackListedWord.java:93)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-002 --> master sync service language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.getGenderDtls(MasterSyncServiceImpl.java:364)
	at io.mosip.registration.test.MasterSyncGenderDetail.verifyGenderDetailByCode(MasterSyncGenderDetail.java:131)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-002 --> master sync service language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.getGenderDtls(MasterSyncServiceImpl.java:364)
	at io.mosip.registration.test.MasterSyncGenderDetail.verifyGenderDetailByName(MasterSyncGenderDetail.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-003 --> master sync service code and language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.getIndividualType(MasterSyncServiceImpl.java:439)
	at io.mosip.registration.test.MasterSyncIndividualType.verifyIndividualTypeByName(MasterSyncIndividualType.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-003 --> master sync service code and language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.getIndividualType(MasterSyncServiceImpl.java:439)
	at io.mosip.registration.test.MasterSyncIndividualType.verifyIndividualTypeByName(MasterSyncIndividualType.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-003 --> master sync service code and language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.findProvianceByHierarchyCode(MasterSyncServiceImpl.java:259)
	at io.mosip.registration.test.MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(MasterSyncLocationByHierarchyCode.java:154)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-003 --> master sync service code and language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.findProvianceByHierarchyCode(MasterSyncServiceImpl.java:259)
	at io.mosip.registration.test.MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(MasterSyncLocationByHierarchyCode.java:154)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-003 --> master sync service code and language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.findProvianceByHierarchyCode(MasterSyncServiceImpl.java:259)
	at io.mosip.registration.test.MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(MasterSyncProvianceByHierarchyCode.java:139)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-003 --> master sync service code and language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.findProvianceByHierarchyCode(MasterSyncServiceImpl.java:259)
	at io.mosip.registration.test.MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(MasterSyncProvianceByHierarchyCode.java:139)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.service.sync.impl.PreRegistrationDataSyncServiceImpl.prepareDataSyncRequestDTO(PreRegistrationDataSyncServiceImpl.java:542)
	at io.mosip.registration.service.sync.impl.PreRegistrationDataSyncServiceImpl.getPreRegistrationIds(PreRegistrationDataSyncServiceImpl.java:116)
	at io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(PreRegistrationDataSyncServiceTest.java:252)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.service.sync.impl.PreRegistrationDataSyncServiceImpl.prepareDataSyncRequestDTO(PreRegistrationDataSyncServiceImpl.java:542)
	at io.mosip.registration.service.sync.impl.PreRegistrationDataSyncServiceImpl.getPreRegistrationIds(PreRegistrationDataSyncServiceImpl.java:116)
	at io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(PreRegistrationDataSyncServiceTest.java:252)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657)
	at java.util.ArrayList.get(ArrayList.java:433)
	at io.mosip.registration.test.PreRegistrationDataSyncServiceTest.testDeletePreRegRecords(PreRegistrationDataSyncServiceTest.java:363)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657)
	at java.util.ArrayList.get(ArrayList.java:433)
	at io.mosip.registration.test.PreRegistrationDataSyncServiceTest.testDeletePreRegRecords(PreRegistrationDataSyncServiceTest.java:363)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[Exception : REG-SER-PRS - 233 --> Status is empty or null]]>
    </line>
    <line>
      <![CDATA[io.mosip.registration.exception.RegBaseUncheckedException: PCC-RDA-001 --> Exception while saving the registration details to DB; 
nested exception is io.mosip.kernel.core.dataaccess.exception.DataAccessLayerException: KER-DAH-001 --> org.hibernate.exception.ConstraintViolationException: could not execute statement; 
nested exception is javax.persistence.PersistenceException: org.hibernate.exception.ConstraintViolationException: could not execute statement
	at io.mosip.registration.dao.impl.RegistrationDAOImpl.save(RegistrationDAOImpl.java:103)
	at sun.reflect.GeneratedMethodAccessor853.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:197)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy183.save(Unknown Source)
	at io.mosip.registration.service.packet.impl.PacketHandlerServiceImpl.handle(PacketHandlerServiceImpl.java:159)
	at io.mosip.registration.util.CommonUtil.packetCreation(CommonUtil.java:559)
	at io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest.validatePacketCreation(RegPacketStatusServicePacketSyncStatusTest.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
Caused by: io.mosip.kernel.core.dataaccess.exception.DataAccessLayerException: KER-DAH-001 --> org.hibernate.exception.ConstraintViolationException: could not execute statement; 
nested exception is javax.persistence.PersistenceException: org.hibernate.exception.ConstraintViolationException: could not execute statement
	at io.mosip.kernel.dataaccess.hibernate.repository.impl.HibernateRepositoryImpl.create(HibernateRepositoryImpl.java:71)
	at sun.reflect.GeneratedMethodAccessor257.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:377)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:629)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:593)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:578)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy182.create(Unknown Source)
	at io.mosip.registration.dao.impl.RegistrationDAOImpl.save(RegistrationDAOImpl.java:97)
	... 43 more
Caused by: javax.persistence.PersistenceException: org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:149)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:157)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:164)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1443)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1423)
	at sun.reflect.GeneratedMethodAccessor94.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:304)
	at com.sun.proxy.$Proxy124.flush(Unknown Source)
	at io.mosip.kernel.dataaccess.hibernate.repository.impl.HibernateRepositoryImpl.create(HibernateRepositoryImpl.java:65)
	... 69 more
Caused by: org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:59)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:111)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:97)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:178)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3032)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3547)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:89)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:600)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:474)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:337)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1437)
	... 76 more
Caused by: org.apache.derby.shared.common.error.DerbySQLIntegrityConstraintViolationException: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'PK_REG_ID' defined on 'REGISTRATION'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(Unknown Source)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:175)
	... 84 more
Caused by: ERROR 23505: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'PK_REG_ID' defined on 'REGISTRATION'.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.sql.execute.IndexChanger.insertAndCheckDups(Unknown Source)
	at org.apache.derby.impl.sql.execute.IndexChanger.doInsert(Unknown Source)
	at org.apache.derby.impl.sql.execute.IndexChanger.insert(Unknown Source)
	at org.apache.derby.impl.sql.execute.IndexSetChanger.insert(Unknown Source)
	at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(Unknown Source)
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	... 89 more
]]>
    </line>
    <line>
      <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: PCC-NSI-001 --> Message and Number can not be null
	at io.mosip.registration.service.template.impl.NotificationServiceImpl.sendSMS(NotificationServiceImpl.java:95)
	at io.mosip.registration.test.SMSNotificationServiceTest.validateSendSMSTest(SMSNotificationServiceTest.java:91)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: PCC-NSI-001 --> Message and Number can not be null
	at io.mosip.registration.service.template.impl.NotificationServiceImpl.sendSMS(NotificationServiceImpl.java:95)
	at io.mosip.registration.test.SMSNotificationServiceTest.validateSendSMSTest(SMSNotificationServiceTest.java:91)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.util.CommonUtil.verifyIfFileExist(CommonUtil.java:261)
	at io.mosip.registration.test.StorageServiceTest.validateStoreToDisk(StorageServiceTest.java:133)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.util.CommonUtil.verifyIfFileExist(CommonUtil.java:261)
	at io.mosip.registration.test.StorageServiceTest.validateStoreToDisk(StorageServiceTest.java:133)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: PCC-TSI-001 --> Template Type Code / Language Code cannot be null
	at io.mosip.registration.service.template.impl.TemplateServiceImpl.getHtmlTemplate(TemplateServiceImpl.java:106)
	at io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(TemplateServiceTest.java:202)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: PCC-TSI-001 --> Template Type Code / Language Code cannot be null
	at io.mosip.registration.service.template.impl.TemplateServiceImpl.getHtmlTemplate(TemplateServiceImpl.java:106)
	at io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(TemplateServiceTest.java:202)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: PCC-TSI-001 --> Template Type Code / Language Code cannot be null
	at io.mosip.registration.service.template.impl.TemplateServiceImpl.getHtmlTemplate(TemplateServiceImpl.java:106)
	at io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(TemplateServiceTest.java:202)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `byte[]` from String ",": Failed to decode VALUE_STRING as base64 (MIME-NO-LINEFEEDS): Illegal character '"' (code 0x22) in base64 content
 at [Source: (StringReader); line: 1, column: 419210] (through reference chain: io.mosip.registration.dto.biometric.BiometricDTO["applicantBiometricDTO"]->io.mosip.registration.dto.biometric.BiometricInfoDTO["fingerprintDetailsDTO"]->java.util.ArrayList[0]->io.mosip.registration.dto.biometric.FingerprintDetailsDTO["fingerPrintISOImage"])
	at com.fasterxml.jackson.databind.exc.InvalidFormatException.from(InvalidFormatException.java:67)
	at com.fasterxml.jackson.databind.DeserializationContext.weirdStringException(DeserializationContext.java:1676)
	at com.fasterxml.jackson.databind.DeserializationContext.handleWeirdStringValue(DeserializationContext.java:932)
	at com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$ByteDeser.deserialize(PrimitiveArrayDeserializers.java:484)
	at com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$ByteDeser.deserialize(PrimitiveArrayDeserializers.java:446)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:288)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:286)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:245)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:27)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:288)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:288)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4202)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3205)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3173)
	at io.mosip.registration.util.CommonUtil.getBiotestData(CommonUtil.java:990)
	at io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(UserOnboardValidateTest.java:107)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "fingerPrintISOImage" (class io.mosip.registration.dto.biometric.IrisDetailsDTO), not marked as ignorable (9 known properties: "irises", "irisIso", "iris", "numOfIrisRetry", "forceCaptured", "irisType", "captured", "irisImageName", "qualityScore"])
 at [Source: (StringReader); line: 1, column: 38046] (through reference chain: io.mosip.registration.dto.biometric.BiometricDTO["applicantBiometricDTO"]->io.mosip.registration.dto.biometric.BiometricInfoDTO["irisDetailsDTO"]->java.util.ArrayList[0]->io.mosip.registration.dto.biometric.IrisDetailsDTO["fingerPrintISOImage"])
	at com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:61)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(DeserializationContext.java:840)
	at com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1192)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1592)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1570)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:294)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:286)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:245)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:27)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:288)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:288)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4202)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3205)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3173)
	at io.mosip.registration.util.CommonUtil.getBiotestData(CommonUtil.java:990)
	at io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(UserOnboardValidateTest.java:107)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: PCC-ZCS-004 --> Map containing the generated files cannot be null or empty
	at io.mosip.registration.service.BaseService.throwRegBaseCheckedException(BaseService.java:361)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.validateInputData(ZipCreationServiceImpl.java:93)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.createPacket(ZipCreationServiceImpl.java:58)
	at io.mosip.registration.test.ZipCreationServiceTest.createPacketcheckedExceptionEmptyFileInputTest(ZipCreationServiceTest.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: PCC-ZCS-004 --> Map containing the generated files cannot be null or empty
	at io.mosip.registration.service.BaseService.throwRegBaseCheckedException(BaseService.java:361)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.validateInputData(ZipCreationServiceImpl.java:93)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.createPacket(ZipCreationServiceImpl.java:58)
	at io.mosip.registration.test.ZipCreationServiceTest.createPacketcheckedExceptionEmptyInputsTest(ZipCreationServiceTest.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: PCC-ZCS-004 --> Map containing the generated files cannot be null or empty
	at io.mosip.registration.service.BaseService.throwRegBaseCheckedException(BaseService.java:361)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.validateInputData(ZipCreationServiceImpl.java:93)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.createPacket(ZipCreationServiceImpl.java:58)
	at io.mosip.registration.test.ZipCreationServiceTest.createPacketcheckedExceptionIncompleteInputTest(ZipCreationServiceTest.java:161)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
    <line>
      <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: PCC-ZCS-004 --> Map containing the generated files cannot be null or empty
	at io.mosip.registration.service.BaseService.throwRegBaseCheckedException(BaseService.java:361)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.validateInputData(ZipCreationServiceImpl.java:89)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.createPacket(ZipCreationServiceImpl.java:58)
	at io.mosip.registration.test.ZipCreationServiceTest.createPacketcheckedExceptionNullInputTest(ZipCreationServiceTest.java:131)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
    </line>
  </reporter-output>
  <suite name="Registration Integration Test Suite" duration-ms="358913" started-at="2020-08-27T11:52:41Z" finished-at="2020-08-27T11:58:40Z">
    <groups>
    </groups>
    <test name="Registration Integration Test" duration-ms="358913" started-at="2020-08-27T11:52:41Z" finished-at="2020-08-27T11:58:40Z">
      <class name="io.mosip.registration.test.PacketSyncServiceTest">
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" is-config="true" status="PASS" duration-ms="6" finished-at="2020-08-27T17:27:06Z" started-at="2020-08-27T17:27:06Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketSyncServiceTest.validateFetchPacketsToBeSynched()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="setUp" is-config="true" duration-ms="4743" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="validateFetchPacketsToBeSynched()[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="regClient_PacketSyncService_validate_PacketsFetchedToBeSynced" duration-ms="27" started-at="2020-08-27T17:27:11Z" finished-at="2020-08-27T17:27:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketSyncService_validate_PacketsFetchedToBeSynced -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:27:11Z" finished-at="2020-08-27T17:27:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=PacketSyncServiceTest.validateFetchPacketsToBeSynched()[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:11Z" finished-at="2020-08-27T17:27:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketSyncServiceTest.validateFetchPacketsToBeSynched()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:11Z" finished-at="2020-08-27T17:27:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketSyncServiceTest.validateSyncPacketsToServer(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="setUp" is-config="true" duration-ms="6036" started-at="2020-08-27T17:27:11Z" finished-at="2020-08-27T17:27:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="validateSyncPacketsToServer(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="regClient_PacketSyncService_SyncInvalidPacketToServer" duration-ms="522" started-at="2020-08-27T17:27:17Z" data-provider="PacketSyncDataProvider" finished-at="2020-08-27T17:27:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketSyncService_SyncInvalidPacketToServer]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketSyncService_SyncInvalidPacketToServer -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:27:17Z" finished-at="2020-08-27T17:27:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketSyncService_validate_PacketsFetchedToBeSynced status=SUCCESS method=PacketSyncServiceTest.validateSyncPacketsToServer(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:27:17Z" finished-at="2020-08-27T17:27:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketSyncServiceTest.validateSyncPacketsToServer(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:17Z" finished-at="2020-08-27T17:27:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketSyncServiceTest.validateSyncPacketsToServer(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="setUp" is-config="true" duration-ms="7373" started-at="2020-08-27T17:27:17Z" finished-at="2020-08-27T17:27:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="validateSyncPacketsToServer(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="regClient_PacketSyncService_Sync_single_packet_Invalid" duration-ms="37" started-at="2020-08-27T17:27:25Z" data-provider="PacketSyncDataProvider" finished-at="2020-08-27T17:27:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketSyncService_Sync_single_packet_Invalid]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketSyncService_Sync_single_packet_Invalid -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:25Z" finished-at="2020-08-27T17:27:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketSyncService_SyncInvalidPacketToServer status=SUCCESS method=PacketSyncServiceTest.validateSyncPacketsToServer(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="setUp" is-config="true" duration-ms="5048" started-at="2020-08-27T17:27:25Z" finished-at="2020-08-27T17:27:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:25Z" finished-at="2020-08-27T17:27:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketSyncServiceTest.validateSyncPacketsToServer(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:25Z" finished-at="2020-08-27T17:27:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketSyncServiceTest.validateSyncPacketsToServer(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validateSyncPacketsToServer(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="regClient_PacketSyncService_Sync_single_packet_Valid" duration-ms="27" started-at="2020-08-27T17:27:30Z" data-provider="PacketSyncDataProvider" finished-at="2020-08-27T17:27:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketSyncService_Sync_single_packet_Valid]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: PCC-PUS-011 --> Packet id can not be empty or null
	at io.mosip.registration.service.packet.impl.PacketSynchServiceImpl.packetSync(PacketSynchServiceImpl.java:309)
	at io.mosip.registration.test.PacketSyncServiceTest.validateSyncPacketsToServer(PacketSyncServiceTest.java:214)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_PacketSyncService_Sync_single_packet_Valid -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:30Z" finished-at="2020-08-27T17:27:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketSyncService_Sync_single_packet_Invalid status=SUCCESS method=PacketSyncServiceTest.validateSyncPacketsToServer(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008] output=io.mosip.registration.exception.RegBaseCheckedException: PCC-PUS-011 --> Packet id can not be empty or null
	at io.mosip.registration.service.packet.impl.PacketSynchServiceImpl.packetSync(PacketSynchServiceImpl.java:309)
	at io.mosip.registration.test.PacketSyncServiceTest.validateSyncPacketsToServer(PacketSyncServiceTest.java:214)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="setUp" is-config="true" duration-ms="4575" started-at="2020-08-27T17:27:30Z" finished-at="2020-08-27T17:27:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:30Z" finished-at="2020-08-27T17:27:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketSyncServiceTest.validateSyncPacketsToServer(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:30Z" finished-at="2020-08-27T17:27:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketSyncServiceTest.validateSyncPacketsToServer(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validateSyncPacketsToServer(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="regClient_PacketSyncService_SynEODPacketsToServer" duration-ms="10071" started-at="2020-08-27T17:27:34Z" data-provider="PacketSyncDataProvider" finished-at="2020-08-27T17:27:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketSyncService_SynEODPacketsToServer]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketSyncService_SynEODPacketsToServer -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:44Z" finished-at="2020-08-27T17:27:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketSyncServiceTest.validateSyncPacketsToServer(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:44Z" finished-at="2020-08-27T17:27:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketSyncService_Sync_single_packet_Valid status=SUCCESS method=PacketSyncServiceTest.validateSyncPacketsToServer(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="setUp" is-config="true" duration-ms="6606" started-at="2020-08-27T17:27:44Z" finished-at="2020-08-27T17:27:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:44Z" finished-at="2020-08-27T17:27:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketSyncServiceTest.validateSyncPacketsToServer(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validateSyncPacketsToServer(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="regClient_PacketSyncService_SynValidPacketsToServer" duration-ms="2323" started-at="2020-08-27T17:27:51Z" data-provider="PacketSyncDataProvider" finished-at="2020-08-27T17:27:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketSyncService_SynValidPacketsToServer]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketSyncService_SynValidPacketsToServer -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:53Z" finished-at="2020-08-27T17:27:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketSyncService_SynEODPacketsToServer status=SUCCESS method=PacketSyncServiceTest.validateSyncPacketsToServer(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:27:53Z" finished-at="2020-08-27T17:27:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketSyncServiceTest.validateSyncPacketsToServer(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:53Z" finished-at="2020-08-27T17:27:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketSyncServiceTest.validateUpdateSyncStatus()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="setUp" is-config="true" duration-ms="5459" started-at="2020-08-27T17:27:53Z" finished-at="2020-08-27T17:27:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="validateUpdateSyncStatus()[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="regClient_PacketSyncService_validate_UpdateSyncStatus" duration-ms="66" started-at="2020-08-27T17:27:59Z" finished-at="2020-08-27T17:27:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketSyncService_validate_UpdateSyncStatus -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:59Z" finished-at="2020-08-27T17:27:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketSyncService_SynValidPacketsToServer status=SUCCESS method=PacketSyncServiceTest.validateUpdateSyncStatus()[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:59Z" finished-at="2020-08-27T17:27:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketSyncServiceTest.validateUpdateSyncStatus()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.PacketSyncServiceTest@51891008]" test-instance-name="regClient_PacketSyncService_validate_UpdateSyncStatus" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:59Z" finished-at="2020-08-27T17:27:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- io.mosip.registration.test.PacketSyncServiceTest -->
      <class name="io.mosip.registration.test.PacketHandlerServiceTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextBeforeTestClass" is-config="true" duration-ms="11" started-at="2020-08-27T17:22:41Z" finished-at="2020-08-27T17:22:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" is-config="true" status="PASS" duration-ms="16369" finished-at="2020-08-27T17:22:57Z" started-at="2020-08-27T17:22:41Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="2" started-at="2020-08-27T17:22:57Z" finished-at="2020-08-27T17:22:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setUp" is-config="true" duration-ms="5360" started-at="2020-08-27T17:22:57Z" finished-at="2020-08-27T17:23:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="regClient_PacketHandlerService_ChildFaceAuthPacket" duration-ms="6304" started-at="2020-08-27T17:23:02Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:23:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_ChildFaceAuthPacket]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_ChildFaceAuthPacket -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:23:09Z" finished-at="2020-08-27T17:23:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=PacketHandlerServiceTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:23:09Z" finished-at="2020-08-27T17:23:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:23:09Z" finished-at="2020-08-27T17:23:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setUp" is-config="true" duration-ms="17135" started-at="2020-08-27T17:23:09Z" finished-at="2020-08-27T17:23:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="regClient_PacketHandlerService_ChildPacket-ValidParent_RID" duration-ms="3627" started-at="2020-08-27T17:23:26Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:23:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_ChildPacket-ValidParent_RID]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_ChildPacket-ValidParent_RID -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:23:30Z" finished-at="2020-08-27T17:23:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_ChildFaceAuthPacket status=SUCCESS method=PacketHandlerServiceTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:23:30Z" finished-at="2020-08-27T17:23:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:23:30Z" finished-at="2020-08-27T17:23:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setUp" is-config="true" duration-ms="9755" started-at="2020-08-27T17:23:30Z" finished-at="2020-08-27T17:23:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="regClient_PacketHandlerService_ChildPacket_InvalidParentUIN" duration-ms="4934" started-at="2020-08-27T17:23:39Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:23:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_ChildPacket_InvalidParentUIN]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_ChildPacket_InvalidParentUIN -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:23:44Z" finished-at="2020-08-27T17:23:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_ChildPacket-ValidParent_RID status=SUCCESS method=PacketHandlerServiceTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:23:44Z" finished-at="2020-08-27T17:23:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:23:44Z" finished-at="2020-08-27T17:23:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setUp" is-config="true" duration-ms="9834" started-at="2020-08-27T17:23:44Z" finished-at="2020-08-27T17:23:54Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="regClient_PacketHandlerService_ChildPacket_ValidParentUIN" duration-ms="4869" started-at="2020-08-27T17:23:54Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:23:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_ChildPacket_ValidParentUIN]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_ChildPacket_ValidParentUIN -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:23:59Z" finished-at="2020-08-27T17:23:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:23:59Z" finished-at="2020-08-27T17:23:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_ChildPacket_InvalidParentUIN status=SUCCESS method=PacketHandlerServiceTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:23:59Z" finished-at="2020-08-27T17:23:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setUp" is-config="true" duration-ms="8666" started-at="2020-08-27T17:23:59Z" finished-at="2020-08-27T17:24:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="regClient_PacketHandlerService_ChildResidentBiometricPacketCreation" duration-ms="4721" started-at="2020-08-27T17:24:08Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:24:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_ChildResidentBiometricPacketCreation]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_ChildResidentBiometricPacketCreation -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:24:12Z" finished-at="2020-08-27T17:24:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_ChildPacket_ValidParentUIN status=SUCCESS method=PacketHandlerServiceTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:24:12Z" finished-at="2020-08-27T17:24:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setUp" is-config="true" duration-ms="8807" started-at="2020-08-27T17:24:12Z" finished-at="2020-08-27T17:24:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:24:12Z" finished-at="2020-08-27T17:24:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="regClient_PacketHandlerService_Child_Packet_InvalidParentRID" duration-ms="3509" started-at="2020-08-27T17:24:21Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:24:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_Child_Packet_InvalidParentRID]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_Child_Packet_InvalidParentRID -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:24:25Z" finished-at="2020-08-27T17:24:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_ChildResidentBiometricPacketCreation status=SUCCESS method=PacketHandlerServiceTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:24:25Z" finished-at="2020-08-27T17:24:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setUp" is-config="true" duration-ms="8656" started-at="2020-08-27T17:24:25Z" finished-at="2020-08-27T17:24:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:24:25Z" finished-at="2020-08-27T17:24:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="regClient_PacketHandlerService_Duplicate_Bio&amp;Unique_Demo_Packet" duration-ms="4513" started-at="2020-08-27T17:24:33Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:24:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_Duplicate_Bio&Unique_Demo_Packet]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_Duplicate_Bio&Unique_Demo_Packet -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setUp" is-config="true" duration-ms="4132" started-at="2020-08-27T17:24:38Z" finished-at="2020-08-27T17:24:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:24:38Z" finished-at="2020-08-27T17:24:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:24:38Z" finished-at="2020-08-27T17:24:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_Child_Packet_InvalidParentRID status=SUCCESS method=PacketHandlerServiceTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:24:38Z" finished-at="2020-08-27T17:24:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="regClient_PacketHandlerService_Duplicate_Demo&amp;Unique_Bio_Packet" duration-ms="3464" started-at="2020-08-27T17:24:42Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:24:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_Duplicate_Demo&Unique_Bio_Packet]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_Duplicate_Demo&Unique_Bio_Packet -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:24:45Z" finished-at="2020-08-27T17:24:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_Duplicate_Bio&Unique_Demo_Packet status=SUCCESS method=PacketHandlerServiceTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:24:45Z" finished-at="2020-08-27T17:24:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setUp" is-config="true" duration-ms="4497" started-at="2020-08-27T17:24:45Z" finished-at="2020-08-27T17:24:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:24:45Z" finished-at="2020-08-27T17:24:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="regClient_PacketHandlerService_ResidentNonBiometricPacketCreation" duration-ms="3751" started-at="2020-08-27T17:24:50Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:24:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_ResidentNonBiometricPacketCreation]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_ResidentNonBiometricPacketCreation -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:24:54Z" finished-at="2020-08-27T17:24:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_Duplicate_Demo&Unique_Bio_Packet status=SUCCESS method=PacketHandlerServiceTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setUp" is-config="true" duration-ms="7663" started-at="2020-08-27T17:24:54Z" finished-at="2020-08-27T17:25:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:24:54Z" finished-at="2020-08-27T17:24:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:24:54Z" finished-at="2020-08-27T17:24:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="regClient_PacketHandlerService_Resident_FingerPrint_Bio_Exception" duration-ms="4625" started-at="2020-08-27T17:25:01Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:25:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_Resident_FingerPrint_Bio_Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_Resident_FingerPrint_Bio_Exception -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setUp" is-config="true" duration-ms="8066" started-at="2020-08-27T17:25:06Z" finished-at="2020-08-27T17:25:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:06Z" finished-at="2020-08-27T17:25:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:06Z" finished-at="2020-08-27T17:25:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:06Z" finished-at="2020-08-27T17:25:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_ResidentNonBiometricPacketCreation status=SUCCESS method=PacketHandlerServiceTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" duration-ms="4425" started-at="2020-08-27T17:25:14Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:25:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_Resident_Iris_Bio_Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_Resident_Iris_Bio_Exception -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:18Z" finished-at="2020-08-27T17:25:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceTest.validatePacketCreation(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:18Z" finished-at="2020-08-27T17:25:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810]" test-instance-name="regClient_PacketHandlerService_Resident_Iris_Bio_Exception" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:18Z" finished-at="2020-08-27T17:25:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_Resident_FingerPrint_Bio_Exception status=SUCCESS method=PacketHandlerServiceTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceTest@66ea810] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.registration.test.PacketHandlerServiceTest -->
      <class name="io.mosip.registration.test.PacketHandlerServiceUpdateUINTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:18Z" finished-at="2020-08-27T17:25:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" is-config="true" status="PASS" duration-ms="4" finished-at="2020-08-27T17:25:18Z" started-at="2020-08-27T17:25:18Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setUp" is-config="true" duration-ms="6449" started-at="2020-08-27T17:25:18Z" finished-at="2020-08-27T17:25:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:18Z" finished-at="2020-08-27T17:25:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="regClient_PacketHandlerService_UpdateUIN_Biometric_FingerPrint" duration-ms="23" started-at="2020-08-27T17:25:25Z" data-provider="UpdateUIN" finished-at="2020-08-27T17:25:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_UpdateUIN_Biometric_FingerPrint]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_UpdateUIN_Biometric_FingerPrint -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:25Z" finished-at="2020-08-27T17:25:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487] output=java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:25Z" finished-at="2020-08-27T17:25:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:25:25Z" finished-at="2020-08-27T17:25:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setUp" is-config="true" duration-ms="12146" started-at="2020-08-27T17:25:25Z" finished-at="2020-08-27T17:25:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="regClient_PacketHandlerService_UpdateUIN_Biometric_IRIS" duration-ms="15" started-at="2020-08-27T17:25:37Z" data-provider="UpdateUIN" finished-at="2020-08-27T17:25:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_UpdateUIN_Biometric_IRIS]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_UpdateUIN_Biometric_IRIS -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:37Z" finished-at="2020-08-27T17:25:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:25:37Z" finished-at="2020-08-27T17:25:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:37Z" finished-at="2020-08-27T17:25:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_UpdateUIN_Biometric_FingerPrint status=SUCCESS method=PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487] output=java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setUp" is-config="true" duration-ms="4359" started-at="2020-08-27T17:25:37Z" finished-at="2020-08-27T17:25:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="regClient_PacketHandlerService_UpdateUIN_InvalidUIN" duration-ms="8" started-at="2020-08-27T17:25:41Z" data-provider="UpdateUIN" finished-at="2020-08-27T17:25:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_UpdateUIN_InvalidUIN]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_UpdateUIN_InvalidUIN -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:41Z" finished-at="2020-08-27T17:25:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setUp" is-config="true" duration-ms="4375" started-at="2020-08-27T17:25:41Z" finished-at="2020-08-27T17:25:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:41Z" finished-at="2020-08-27T17:25:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:41Z" finished-at="2020-08-27T17:25:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_UpdateUIN_Biometric_IRIS status=SUCCESS method=PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="regClient_PacketHandlerService_UpdateUIN_Valid_Address" duration-ms="16" started-at="2020-08-27T17:25:46Z" data-provider="UpdateUIN" finished-at="2020-08-27T17:25:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_UpdateUIN_Valid_Address]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_UpdateUIN_Valid_Address -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:46Z" finished-at="2020-08-27T17:25:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_UpdateUIN_InvalidUIN status=SUCCESS method=PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487] output=java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:46Z" finished-at="2020-08-27T17:25:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:46Z" finished-at="2020-08-27T17:25:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setUp" is-config="true" duration-ms="7729" started-at="2020-08-27T17:25:46Z" finished-at="2020-08-27T17:25:54Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="regClient_PacketHandlerService_UpdateUIN_Valid_Age" duration-ms="13" started-at="2020-08-27T17:25:54Z" data-provider="UpdateUIN" finished-at="2020-08-27T17:25:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_UpdateUIN_Valid_Age]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_UpdateUIN_Valid_Age -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:25:54Z" finished-at="2020-08-27T17:25:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:54Z" finished-at="2020-08-27T17:25:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_UpdateUIN_Valid_Address status=SUCCESS method=PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487] output=java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:54Z" finished-at="2020-08-27T17:25:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setUp" is-config="true" duration-ms="5121" started-at="2020-08-27T17:25:54Z" finished-at="2020-08-27T17:25:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="regClient_PacketHandlerService_UpdateUIN_Valid_CNIE_Number" duration-ms="11" started-at="2020-08-27T17:25:59Z" data-provider="UpdateUIN" finished-at="2020-08-27T17:25:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_UpdateUIN_Valid_CNIE_Number]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_UpdateUIN_Valid_CNIE_Number -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:59Z" finished-at="2020-08-27T17:25:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_UpdateUIN_Valid_Age status=SUCCESS method=PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487] output=java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:25:59Z" finished-at="2020-08-27T17:25:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setUp" is-config="true" duration-ms="4662" started-at="2020-08-27T17:25:59Z" finished-at="2020-08-27T17:26:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:25:59Z" finished-at="2020-08-27T17:25:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="regClient_PacketHandlerService_UpdateUIN_Valid_Email" duration-ms="15" started-at="2020-08-27T17:26:03Z" data-provider="UpdateUIN" finished-at="2020-08-27T17:26:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_UpdateUIN_Valid_Email]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_UpdateUIN_Valid_Email -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:03Z" finished-at="2020-08-27T17:26:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setUp" is-config="true" duration-ms="8420" started-at="2020-08-27T17:26:03Z" finished-at="2020-08-27T17:26:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:03Z" finished-at="2020-08-27T17:26:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_UpdateUIN_Valid_CNIE_Number status=SUCCESS method=PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487] output=java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:03Z" finished-at="2020-08-27T17:26:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="regClient_PacketHandlerService_UpdateUIN_Valid_foreigner" duration-ms="9" started-at="2020-08-27T17:26:12Z" data-provider="UpdateUIN" finished-at="2020-08-27T17:26:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_UpdateUIN_Valid_foreigner]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_UpdateUIN_Valid_foreigner -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:12Z" finished-at="2020-08-27T17:26:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_UpdateUIN_Valid_Email status=SUCCESS method=PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487] output=java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:26:12Z" finished-at="2020-08-27T17:26:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setUp" is-config="true" duration-ms="3800" started-at="2020-08-27T17:26:12Z" finished-at="2020-08-27T17:26:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:12Z" finished-at="2020-08-27T17:26:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="regClient_PacketHandlerService_UpdateUIN_Valid_Gender" duration-ms="13" started-at="2020-08-27T17:26:16Z" data-provider="UpdateUIN" finished-at="2020-08-27T17:26:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_UpdateUIN_Valid_Gender]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_UpdateUIN_Valid_Gender -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setUp" is-config="true" duration-ms="7850" started-at="2020-08-27T17:26:16Z" finished-at="2020-08-27T17:26:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:16Z" finished-at="2020-08-27T17:26:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_UpdateUIN_Valid_foreigner status=SUCCESS method=PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487] output=java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:16Z" finished-at="2020-08-27T17:26:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:16Z" finished-at="2020-08-27T17:26:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="regClient_PacketHandlerService_UpdateUIN_Valid_Name" duration-ms="14" started-at="2020-08-27T17:26:23Z" data-provider="UpdateUIN" finished-at="2020-08-27T17:26:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_UpdateUIN_Valid_Name]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_UpdateUIN_Valid_Name -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setUp" is-config="true" duration-ms="6958" started-at="2020-08-27T17:26:24Z" finished-at="2020-08-27T17:26:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:24Z" finished-at="2020-08-27T17:26:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:24Z" finished-at="2020-08-27T17:26:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_UpdateUIN_Valid_Gender status=SUCCESS method=PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487] output=java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:24Z" finished-at="2020-08-27T17:26:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="regClient_PacketHandlerService_UpdateUIN_Valid_ParentOrGaurdian_LeftIRIS" duration-ms="12" started-at="2020-08-27T17:26:30Z" data-provider="UpdateUIN" finished-at="2020-08-27T17:26:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_UpdateUIN_Valid_ParentOrGaurdian_LeftIRIS]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_UpdateUIN_Valid_ParentOrGaurdian_LeftIRIS -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setResultTestName" is-config="true" duration-ms="2" started-at="2020-08-27T17:26:30Z" finished-at="2020-08-27T17:26:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_UpdateUIN_Valid_Name status=SUCCESS method=PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487] output=java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setUp" is-config="true" duration-ms="4959" started-at="2020-08-27T17:26:30Z" finished-at="2020-08-27T17:26:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:30Z" finished-at="2020-08-27T17:26:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:30Z" finished-at="2020-08-27T17:26:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="regClient_PacketHandlerService_UpdateUIN_Valid_ParentOrGaurdian_LeftSlap" duration-ms="9" started-at="2020-08-27T17:26:35Z" data-provider="UpdateUIN" finished-at="2020-08-27T17:26:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_UpdateUIN_Valid_ParentOrGaurdian_LeftSlap]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_UpdateUIN_Valid_ParentOrGaurdian_LeftSlap -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setUp" is-config="true" duration-ms="6198" started-at="2020-08-27T17:26:35Z" finished-at="2020-08-27T17:26:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:35Z" finished-at="2020-08-27T17:26:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_UpdateUIN_Valid_ParentOrGaurdian_LeftIRIS status=SUCCESS method=PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487] output=java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:35Z" finished-at="2020-08-27T17:26:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:35Z" finished-at="2020-08-27T17:26:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="regClient_PacketHandlerService_UpdateUIN_Valid_ParentOrGaurdian_RightIRIS" duration-ms="10" started-at="2020-08-27T17:26:42Z" data-provider="UpdateUIN" finished-at="2020-08-27T17:26:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_UpdateUIN_Valid_ParentOrGaurdian_RightIRIS]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_UpdateUIN_Valid_ParentOrGaurdian_RightIRIS -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setUp" is-config="true" duration-ms="4967" started-at="2020-08-27T17:26:42Z" finished-at="2020-08-27T17:26:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:42Z" finished-at="2020-08-27T17:26:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_UpdateUIN_Valid_ParentOrGaurdian_LeftSlap status=SUCCESS method=PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487] output=java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:42Z" finished-at="2020-08-27T17:26:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:42Z" finished-at="2020-08-27T17:26:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="regClient_PacketHandlerService_UpdateUIN_Valid_ParentOrGaurdian_RightSlap" duration-ms="10" started-at="2020-08-27T17:26:47Z" data-provider="UpdateUIN" finished-at="2020-08-27T17:26:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_UpdateUIN_Valid_ParentOrGaurdian_RightSlap]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_UpdateUIN_Valid_ParentOrGaurdian_RightSlap -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:47Z" finished-at="2020-08-27T17:26:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setUp" is-config="true" duration-ms="4915" started-at="2020-08-27T17:26:47Z" finished-at="2020-08-27T17:26:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:47Z" finished-at="2020-08-27T17:26:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:47Z" finished-at="2020-08-27T17:26:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_UpdateUIN_Valid_ParentOrGaurdian_RightIRIS status=SUCCESS method=PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487] output=java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="regClient_PacketHandlerService_UpdateUIN_Valid_ParentOrGaurdian_Thumb" duration-ms="10" started-at="2020-08-27T17:26:52Z" data-provider="UpdateUIN" finished-at="2020-08-27T17:26:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_UpdateUIN_Valid_ParentOrGaurdian_Thumb]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_UpdateUIN_Valid_ParentOrGaurdian_Thumb -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:52Z" finished-at="2020-08-27T17:26:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:52Z" finished-at="2020-08-27T17:26:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_UpdateUIN_Valid_ParentOrGaurdian_RightSlap status=SUCCESS method=PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487] output=java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:52Z" finished-at="2020-08-27T17:26:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setUp" is-config="true" duration-ms="7287" started-at="2020-08-27T17:26:52Z" finished-at="2020-08-27T17:26:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" duration-ms="10" started-at="2020-08-27T17:26:59Z" data-provider="UpdateUIN" finished-at="2020-08-27T17:26:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_UpdateUIN_Valid_PHONE]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_UpdateUIN_Valid_PHONE -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:59Z" finished-at="2020-08-27T17:26:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:59Z" finished-at="2020-08-27T17:26:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487]" test-instance-name="regClient_PacketHandlerService_UpdateUIN_Valid_PHONE" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:59Z" finished-at="2020-08-27T17:26:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_UpdateUIN_Valid_ParentOrGaurdian_Thumb status=SUCCESS method=PacketHandlerServiceUpdateUINTest.validateUINUpadate(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceUpdateUINTest@4dc27487] output=java.lang.NullPointerException
	at io.mosip.registration.test.PacketHandlerServiceUpdateUINTest.validateUINUpadate(PacketHandlerServiceUpdateUINTest.java:175)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.registration.test.PacketHandlerServiceUpdateUINTest -->
      <class name="io.mosip.registration.test.PacketUploadServiceTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:59Z" finished-at="2020-08-27T17:27:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" is-config="true" status="PASS" duration-ms="3" finished-at="2020-08-27T17:27:59Z" started-at="2020-08-27T17:27:59Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:59Z" finished-at="2020-08-27T17:27:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketUploadServiceTest.validateGetSynchedPackets()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="setTestCaseName" is-config="true" duration-ms="6385" started-at="2020-08-27T17:27:59Z" finished-at="2020-08-27T17:28:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="validateGetSynchedPackets()[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="regClient_PacketUploadService_get_Synced_packets_to_Upload_in_Server" duration-ms="31" started-at="2020-08-27T17:28:05Z" finished-at="2020-08-27T17:28:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketUploadService_get_Synced_packets_to_Upload_in_Server -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:05Z" finished-at="2020-08-27T17:28:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=PacketUploadServiceTest.validateGetSynchedPackets()[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:05Z" finished-at="2020-08-27T17:28:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketUploadServiceTest.validateGetSynchedPackets()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:05Z" finished-at="2020-08-27T17:28:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketUploadServiceTest.validatePushPacket(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="setTestCaseName" is-config="true" duration-ms="4467" started-at="2020-08-27T17:28:05Z" finished-at="2020-08-27T17:28:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="validatePushPacket(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="regClient_PacketUploadService_Push_DuplicatePacketToServer" duration-ms="8341" started-at="2020-08-27T17:28:10Z" data-provider="PacketUploadDataProvider" finished-at="2020-08-27T17:28:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketUploadService_Push_DuplicatePacketToServer]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketUploadService_Push_DuplicatePacketToServer -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:18Z" finished-at="2020-08-27T17:28:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketUploadService_get_Synced_packets_to_Upload_in_Server status=SUCCESS method=PacketUploadServiceTest.validatePushPacket(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:18Z" finished-at="2020-08-27T17:28:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketUploadServiceTest.validatePushPacket(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:28:18Z" finished-at="2020-08-27T17:28:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketUploadServiceTest.validatePushPacket(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="setTestCaseName" is-config="true" duration-ms="7588" started-at="2020-08-27T17:28:18Z" finished-at="2020-08-27T17:28:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="validatePushPacket(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="regClient_PacketUploadService_push_valid_packet_toServer" duration-ms="5069" started-at="2020-08-27T17:28:26Z" data-provider="PacketUploadDataProvider" finished-at="2020-08-27T17:28:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketUploadService_push_valid_packet_toServer]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketUploadService_push_valid_packet_toServer -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:28:31Z" finished-at="2020-08-27T17:28:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketUploadService_Push_DuplicatePacketToServer status=SUCCESS method=PacketUploadServiceTest.validatePushPacket(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:31Z" finished-at="2020-08-27T17:28:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketUploadServiceTest.validatePushPacket(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:31Z" finished-at="2020-08-27T17:28:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketUploadServiceTest.validatePushPacket(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="setTestCaseName" is-config="true" duration-ms="8763" started-at="2020-08-27T17:28:31Z" finished-at="2020-08-27T17:28:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="validatePushPacket(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="regClient_PacketUploadService_UpdateStatus_to_database" duration-ms="92" started-at="2020-08-27T17:28:40Z" data-provider="PacketUploadDataProvider" finished-at="2020-08-27T17:28:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketUploadService_UpdateStatus_to_database]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketUploadService_UpdateStatus_to_database -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:40Z" finished-at="2020-08-27T17:28:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:40Z" finished-at="2020-08-27T17:28:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketUploadServiceTest.validatePushPacket(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489]" test-instance-name="regClient_PacketUploadService_UpdateStatus_to_database" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:40Z" finished-at="2020-08-27T17:28:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketUploadService_push_valid_packet_toServer status=SUCCESS method=PacketUploadServiceTest.validatePushPacket(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketUploadServiceTest@d2de489] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.registration.test.PacketUploadServiceTest -->
      <class name="io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest">
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" is-config="true" status="PASS" duration-ms="3" finished-at="2020-08-27T17:26:59Z" started-at="2020-08-27T17:26:59Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:26:59Z" finished-at="2020-08-27T17:26:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="dataSetUp()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="dataSetUp" is-config="true" duration-ms="6831" started-at="2020-08-27T17:26:59Z" finished-at="2020-08-27T17:27:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataSetUp -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="regClient_PacketHandlerService_AdultPacket_with_PreRegId_withDocs" duration-ms="40" started-at="2020-08-27T17:27:06Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_AdultPacket_with_PreRegId_withDocs]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_AdultPacket_with_PreRegId_withDocs -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="regClient_PacketHandlerService_AdultPacket_with_PreRegID_withoutDocs" duration-ms="19" started-at="2020-08-27T17:27:06Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_AdultPacket_with_PreRegID_withoutDocs]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_AdultPacket_with_PreRegID_withoutDocs -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_AdultPacket_with_PreRegId_withDocs status=SUCCESS method=PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="regClient_PacketHandlerService_BioException_FingerPrint_with_PRID" duration-ms="20" started-at="2020-08-27T17:27:06Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_BioException_FingerPrint_with_PRID]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_BioException_FingerPrint_with_PRID -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="regClient_PacketHandlerService_BioException_Iris_with_PRID" duration-ms="15" started-at="2020-08-27T17:27:06Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_BioException_Iris_with_PRID]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_BioException_Iris_with_PRID -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_AdultPacket_with_PreRegID_withoutDocs status=SUCCESS method=PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_BioException_FingerPrint_with_PRID status=SUCCESS method=PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="regClient_PacketHandlerService_ChildPacket_InvalidParentRID" duration-ms="13" started-at="2020-08-27T17:27:06Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_ChildPacket_InvalidParentRID]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_ChildPacket_InvalidParentRID -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="regClient_PacketHandlerService_ChildPacket_InvalidParentUIN" duration-ms="14" started-at="2020-08-27T17:27:06Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_ChildPacket_InvalidParentUIN]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_ChildPacket_InvalidParentUIN -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_BioException_Iris_with_PRID status=SUCCESS method=PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_ChildPacket_InvalidParentRID status=SUCCESS method=PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="regClient_PacketHandlerService_ChildPacket_with_PreRegID_withoutDocs_With_ParentRID" duration-ms="22" started-at="2020-08-27T17:27:06Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_ChildPacket_with_PreRegID_withoutDocs_With_ParentRID]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_ChildPacket_with_PreRegID_withoutDocs_With_ParentRID -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_ChildPacket_InvalidParentUIN status=SUCCESS method=PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="regClient_PacketHandlerService_Duplicate_Bio&amp;Unique_Demo_Packet_with_PRID" duration-ms="29" started-at="2020-08-27T17:27:06Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_Duplicate_Bio&Unique_Demo_Packet_with_PRID]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_Duplicate_Bio&Unique_Demo_Packet_with_PRID -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="regClient_PacketHandlerService_Duplicate_Demo&amp;Unique_Bio_Packets_with_PRID" duration-ms="23" started-at="2020-08-27T17:27:06Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_Duplicate_Demo&Unique_Bio_Packets_with_PRID]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_Duplicate_Demo&Unique_Bio_Packets_with_PRID -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_ChildPacket_with_PreRegID_withoutDocs_With_ParentRID status=SUCCESS method=PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_Duplicate_Bio&Unique_Demo_Packet_with_PRID status=SUCCESS method=PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="regClient_PacketHandlerService_ValidChildPacket_ValidParentRID" duration-ms="24" started-at="2020-08-27T17:27:06Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_ValidChildPacket_ValidParentRID]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_ValidChildPacket_ValidParentRID -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_Duplicate_Demo&Unique_Bio_Packets_with_PRID status=SUCCESS method=PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="regClient_PacketHandlerService_ValidChildPacket_With_ValidParentUIN" duration-ms="20" started-at="2020-08-27T17:27:06Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_ValidChildPacket_With_ValidParentUIN]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_ValidChildPacket_With_ValidParentUIN -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_ValidChildPacket_ValidParentRID status=SUCCESS method=PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" duration-ms="28" started-at="2020-08-27T17:27:06Z" data-provider="PacketHandlerDataProvider" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb]" test-instance-name="regClient_PacketHandlerService_Valid_Unique_Packets_with_PRID" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:27:06Z" finished-at="2020-08-27T17:27:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PacketHandlerService_ValidChildPacket_With_ValidParentUIN status=SUCCESS method=PacketHandlerServiceWithPreRegIDTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest@1b66c0fb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.registration.test.PacketHandlerServiceWithPreRegIDTest -->
    </test> <!-- Registration Integration Test -->
  </suite> <!-- Registration Integration Test Suite -->
  <suite name="Registration Services Automation Suite" duration-ms="674866" started-at="2020-08-27T11:58:40Z" finished-at="2020-08-27T12:09:55Z">
    <groups>
    </groups>
    <test name="Registration Services Test" duration-ms="674866" started-at="2020-08-27T11:58:40Z" finished-at="2020-08-27T12:09:55Z">
      <class name="io.mosip.registration.test.UserOnboardValidateTest">
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" is-config="true" status="PASS" duration-ms="2" finished-at="2020-08-27T17:38:36Z" started-at="2020-08-27T17:38:36Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:36Z" finished-at="2020-08-27T17:38:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="setUp" is-config="true" duration-ms="2920" started-at="2020-08-27T17:38:36Z" finished-at="2020-08-27T17:38:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:36Z" finished-at="2020-08-27T17:38:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validateUserOnboard(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="regClient_UserOnboardService_Valid_UserOnboard_All_Biometric_smoke" duration-ms="113" started-at="2020-08-27T17:38:39Z" data-provider="UserOnboardDataProvider" finished-at="2020-08-27T17:38:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_UserOnboardService_Valid_UserOnboard_All_Biometric_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_UserOnboardService_Valid_UserOnboard_All_Biometric_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:39Z" finished-at="2020-08-27T17:38:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=UserOnboardValidateTest.validateUserOnboard(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:39Z" finished-at="2020-08-27T17:38:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:39Z" finished-at="2020-08-27T17:38:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="setUp" is-config="true" duration-ms="6897" started-at="2020-08-27T17:38:39Z" finished-at="2020-08-27T17:38:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="validateUserOnboard(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="regClient_UserOnboardService_Valid_UserOnboard_AllMarkedException" duration-ms="17" started-at="2020-08-27T17:38:46Z" data-provider="UserOnboardDataProvider" finished-at="2020-08-27T17:38:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_UserOnboardService_Valid_UserOnboard_AllMarkedException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_UserOnboardService_Valid_UserOnboard_AllMarkedException -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:46Z" finished-at="2020-08-27T17:38:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_UserOnboardService_Valid_UserOnboard_All_Biometric_smoke status=SUCCESS method=UserOnboardValidateTest.validateUserOnboard(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="setUp" is-config="true" duration-ms="6864" started-at="2020-08-27T17:38:46Z" finished-at="2020-08-27T17:38:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:46Z" finished-at="2020-08-27T17:38:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:46Z" finished-at="2020-08-27T17:38:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validateUserOnboard(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="regClient_UserOnboardService_Valid_UserOnboard_FaceException" duration-ms="15" started-at="2020-08-27T17:38:53Z" data-provider="UserOnboardDataProvider" finished-at="2020-08-27T17:38:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_UserOnboardService_Valid_UserOnboard_FaceException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_UserOnboardService_Valid_UserOnboard_FaceException -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:53Z" finished-at="2020-08-27T17:38:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:53Z" finished-at="2020-08-27T17:38:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_UserOnboardService_Valid_UserOnboard_AllMarkedException status=SUCCESS method=UserOnboardValidateTest.validateUserOnboard(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="setUp" is-config="true" duration-ms="6961" started-at="2020-08-27T17:38:53Z" finished-at="2020-08-27T17:39:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:53Z" finished-at="2020-08-27T17:38:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validateUserOnboard(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="regClient_UserOnboardService_Valid_UserOnboard_LeftSlap_FingerPrintException" duration-ms="58" started-at="2020-08-27T17:39:00Z" data-provider="UserOnboardDataProvider" finished-at="2020-08-27T17:39:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_UserOnboardService_Valid_UserOnboard_LeftSlap_FingerPrintException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_UserOnboardService_Valid_UserOnboard_LeftSlap_FingerPrintException -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:00Z" finished-at="2020-08-27T17:39:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:00Z" finished-at="2020-08-27T17:39:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="setUp" is-config="true" duration-ms="3848" started-at="2020-08-27T17:39:00Z" finished-at="2020-08-27T17:39:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:00Z" finished-at="2020-08-27T17:39:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_UserOnboardService_Valid_UserOnboard_FaceException status=SUCCESS method=UserOnboardValidateTest.validateUserOnboard(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="validateUserOnboard(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="regClient_UserOnboardService_Valid_UserOnboard_Left_IrisException" duration-ms="108" started-at="2020-08-27T17:39:04Z" data-provider="UserOnboardDataProvider" finished-at="2020-08-27T17:39:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_UserOnboardService_Valid_UserOnboard_Left_IrisException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_UserOnboardService_Valid_UserOnboard_Left_IrisException -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="setUp" is-config="true" duration-ms="5870" started-at="2020-08-27T17:39:04Z" finished-at="2020-08-27T17:39:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:04Z" finished-at="2020-08-27T17:39:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:04Z" finished-at="2020-08-27T17:39:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:04Z" finished-at="2020-08-27T17:39:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_UserOnboardService_Valid_UserOnboard_LeftSlap_FingerPrintException status=SUCCESS method=UserOnboardValidateTest.validateUserOnboard(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="validateUserOnboard(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="regClient_UserOnboardService_Valid_UserOnboard_RightSlap_FingerPrintException" duration-ms="98" started-at="2020-08-27T17:39:10Z" data-provider="UserOnboardDataProvider" finished-at="2020-08-27T17:39:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_UserOnboardService_Valid_UserOnboard_RightSlap_FingerPrintException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_UserOnboardService_Valid_UserOnboard_RightSlap_FingerPrintException -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="setUp" is-config="true" duration-ms="5985" started-at="2020-08-27T17:39:10Z" finished-at="2020-08-27T17:39:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:10Z" finished-at="2020-08-27T17:39:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:10Z" finished-at="2020-08-27T17:39:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_UserOnboardService_Valid_UserOnboard_Left_IrisException status=SUCCESS method=UserOnboardValidateTest.validateUserOnboard(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:10Z" finished-at="2020-08-27T17:39:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validateUserOnboard(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="regClient_UserOnboardService_Valid_UserOnboard_Right_IrisException" duration-ms="72" started-at="2020-08-27T17:39:16Z" data-provider="UserOnboardDataProvider" finished-at="2020-08-27T17:39:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_UserOnboardService_Valid_UserOnboard_Right_IrisException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `byte[]` from String ",": Failed to decode VALUE_STRING as base64 (MIME-NO-LINEFEEDS): Illegal character '"' (code 0x22) in base64 content
 at [Source: (StringReader); line: 1, column: 419210] (through reference chain: io.mosip.registration.dto.biometric.BiometricDTO["applicantBiometricDTO"]->io.mosip.registration.dto.biometric.BiometricInfoDTO["fingerprintDetailsDTO"]->java.util.ArrayList[0]->io.mosip.registration.dto.biometric.FingerprintDetailsDTO["fingerPrintISOImage"])
	at com.fasterxml.jackson.databind.exc.InvalidFormatException.from(InvalidFormatException.java:67)
	at com.fasterxml.jackson.databind.DeserializationContext.weirdStringException(DeserializationContext.java:1676)
	at com.fasterxml.jackson.databind.DeserializationContext.handleWeirdStringValue(DeserializationContext.java:932)
	at com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$ByteDeser.deserialize(PrimitiveArrayDeserializers.java:484)
	at com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$ByteDeser.deserialize(PrimitiveArrayDeserializers.java:446)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:288)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:286)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:245)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:27)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:288)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:288)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4202)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3205)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3173)
	at io.mosip.registration.util.CommonUtil.getBiotestData(CommonUtil.java:990)
	at io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(UserOnboardValidateTest.java:107)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_UserOnboardService_Valid_UserOnboard_Right_IrisException -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:16Z" finished-at="2020-08-27T17:39:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:16Z" finished-at="2020-08-27T17:39:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:16Z" finished-at="2020-08-27T17:39:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_UserOnboardService_Valid_UserOnboard_RightSlap_FingerPrintException status=SUCCESS method=UserOnboardValidateTest.validateUserOnboard(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654] output=com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `byte[]` from String ",": Failed to decode VALUE_STRING as base64 (MIME-NO-LINEFEEDS): Illegal character '"' (code 0x22) in base64 content
 at [Source: (StringReader); line: 1, column: 419210] (through reference chain: io.mosip.registration.dto.biometric.BiometricDTO["applicantBiometricDTO"]->io.mosip.registration.dto.biometric.BiometricInfoDTO["fingerprintDetailsDTO"]->java.util.ArrayList[0]->io.mosip.registration.dto.biometric.FingerprintDetailsDTO["fingerPrintISOImage"])
	at com.fasterxml.jackson.databind.exc.InvalidFormatException.from(InvalidFormatException.java:67)
	at com.fasterxml.jackson.databind.DeserializationContext.weirdStringException(DeserializationContext.java:1676)
	at com.fasterxml.jackson.databind.DeserializationContext.handleWeirdStringValue(DeserializationContext.java:932)
	at com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$ByteDeser.deserialize(PrimitiveArrayDeserializers.java:484)
	at com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$ByteDeser.deserialize(PrimitiveArrayDeserializers.java:446)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:288)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:286)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:245)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:27)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:288)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:288)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4202)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3205)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3173)
	at io.mosip.registration.util.CommonUtil.getBiotestData(CommonUtil.java:990)
	at io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(UserOnboardValidateTest.java:107)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="setUp" is-config="true" duration-ms="4928" started-at="2020-08-27T17:39:16Z" finished-at="2020-08-27T17:39:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="validateUserOnboard(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="regClient_UserOnboardService_Valid_UserOnboard_Thumb_FingerPrintException" duration-ms="150" started-at="2020-08-27T17:39:21Z" data-provider="UserOnboardDataProvider" finished-at="2020-08-27T17:39:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_UserOnboardService_Valid_UserOnboard_Thumb_FingerPrintException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "fingerPrintISOImage" (class io.mosip.registration.dto.biometric.IrisDetailsDTO), not marked as ignorable (9 known properties: "irises", "irisIso", "iris", "numOfIrisRetry", "forceCaptured", "irisType", "captured", "irisImageName", "qualityScore"])
 at [Source: (StringReader); line: 1, column: 38046] (through reference chain: io.mosip.registration.dto.biometric.BiometricDTO["applicantBiometricDTO"]->io.mosip.registration.dto.biometric.BiometricInfoDTO["irisDetailsDTO"]->java.util.ArrayList[0]->io.mosip.registration.dto.biometric.IrisDetailsDTO["fingerPrintISOImage"])
	at com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:61)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(DeserializationContext.java:840)
	at com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1192)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1592)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1570)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:294)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:286)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:245)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:27)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:288)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:288)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4202)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3205)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3173)
	at io.mosip.registration.util.CommonUtil.getBiotestData(CommonUtil.java:990)
	at io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(UserOnboardValidateTest.java:107)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_UserOnboardService_Valid_UserOnboard_Thumb_FingerPrintException -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:21Z" finished-at="2020-08-27T17:39:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="setUp" is-config="true" duration-ms="4897" started-at="2020-08-27T17:39:21Z" finished-at="2020-08-27T17:39:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:21Z" finished-at="2020-08-27T17:39:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_UserOnboardService_Valid_UserOnboard_Right_IrisException status=SUCCESS method=UserOnboardValidateTest.validateUserOnboard(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654] output=com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "fingerPrintISOImage" (class io.mosip.registration.dto.biometric.IrisDetailsDTO), not marked as ignorable (9 known properties: "irises", "irisIso", "iris", "numOfIrisRetry", "forceCaptured", "irisType", "captured", "irisImageName", "qualityScore"])
 at [Source: (StringReader); line: 1, column: 38046] (through reference chain: io.mosip.registration.dto.biometric.BiometricDTO["applicantBiometricDTO"]->io.mosip.registration.dto.biometric.BiometricInfoDTO["irisDetailsDTO"]->java.util.ArrayList[0]->io.mosip.registration.dto.biometric.IrisDetailsDTO["fingerPrintISOImage"])
	at com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:61)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(DeserializationContext.java:840)
	at com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1192)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1592)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1570)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:294)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:286)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:245)
	at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:27)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:288)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:288)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:151)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4202)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3205)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3173)
	at io.mosip.registration.util.CommonUtil.getBiotestData(CommonUtil.java:990)
	at io.mosip.registration.test.UserOnboardValidateTest.validateUserOnboard(UserOnboardValidateTest.java:107)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:21Z" finished-at="2020-08-27T17:39:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.UserOnboardValidateTest.verifyMachinecenterID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="verifyMachinecenterID()[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" duration-ms="1" started-at="2020-08-27T17:39:26Z" finished-at="2020-08-27T17:39:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_UserOnboardService_Valid_MachineCenterDetails_smoke -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:26Z" finished-at="2020-08-27T17:39:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:26Z" finished-at="2020-08-27T17:39:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.UserOnboardValidateTest.verifyMachinecenterID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654]" test-instance-name="regClient_UserOnboardService_Valid_MachineCenterDetails_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:26Z" finished-at="2020-08-27T17:39:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_UserOnboardService_Valid_UserOnboard_Thumb_FingerPrintException status=SUCCESS method=UserOnboardValidateTest.verifyMachinecenterID()[pri:0, instance:io.mosip.registration.test.UserOnboardValidateTest@16aa8654] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.registration.test.UserOnboardValidateTest -->
      <class name="io.mosip.registration.test.LoginServiceRegCenterDetailTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:38Z" finished-at="2020-08-27T17:30:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" is-config="true" status="PASS" duration-ms="3" finished-at="2020-08-27T17:30:38Z" started-at="2020-08-27T17:30:38Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="setUp" is-config="true" duration-ms="8220" started-at="2020-08-27T17:30:38Z" finished-at="2020-08-27T17:30:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testGetRegistrationCenterDetails(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="regClient_LoginService_vaidateRegCenterDetail_smoke" duration-ms="15" started-at="2020-08-27T17:30:46Z" data-provider="registrationCenterDetailsDataProvider" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LoginService_vaidateRegCenterDetail_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_LoginService_vaidateRegCenterDetail_smoke -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="testGetRegistrationCenterDetails(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="regClient_LoginService_invalidLangCode" duration-ms="14" started-at="2020-08-27T17:30:46Z" data-provider="registrationCenterDetailsDataProvider" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LoginService_invalidLangCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_LoginService_invalidLangCode -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_LoginService_vaidateRegCenterDetail_smoke status=SUCCESS method=LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testGetRegistrationCenterDetails(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="regClient_LoginService_invalidLangCodeEmpty" duration-ms="5" started-at="2020-08-27T17:30:46Z" data-provider="registrationCenterDetailsDataProvider" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LoginService_invalidLangCodeEmpty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(LoginServiceRegCenterDetailTest.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_LoginService_invalidLangCodeEmpty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_LoginService_invalidLangCode status=SUCCESS method=LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b] output=java.lang.NullPointerException
	at io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(LoginServiceRegCenterDetailTest.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testGetRegistrationCenterDetails(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="regClient_LoginService_invalidLangCodeRegCenter" duration-ms="11" started-at="2020-08-27T17:30:46Z" data-provider="registrationCenterDetailsDataProvider" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LoginService_invalidLangCodeRegCenter]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_LoginService_invalidLangCodeRegCenter -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_LoginService_invalidLangCodeEmpty status=SUCCESS method=LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testGetRegistrationCenterDetails(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="regClient_LoginService_invalidLangCodeRegCenter_empty" duration-ms="2" started-at="2020-08-27T17:30:46Z" data-provider="registrationCenterDetailsDataProvider" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LoginService_invalidLangCodeRegCenter_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(LoginServiceRegCenterDetailTest.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_LoginService_invalidLangCodeRegCenter_empty -->
        <test-method status="PASS" signature="testGetRegistrationCenterDetails(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="regClient_LoginService_invalidRegCenter" duration-ms="11" started-at="2020-08-27T17:30:46Z" data-provider="registrationCenterDetailsDataProvider" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LoginService_invalidRegCenter]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_LoginService_invalidRegCenter -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_LoginService_invalidLangCodeRegCenter status=SUCCESS method=LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b] output=java.lang.NullPointerException
	at io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(LoginServiceRegCenterDetailTest.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_LoginService_invalidLangCodeRegCenter_empty status=SUCCESS method=LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testGetRegistrationCenterDetails(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="regClient_LoginService_invalidRegCenterEmpty" duration-ms="4" started-at="2020-08-27T17:30:46Z" data-provider="registrationCenterDetailsDataProvider" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LoginService_invalidRegCenterEmpty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(LoginServiceRegCenterDetailTest.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_LoginService_invalidRegCenterEmpty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_LoginService_invalidRegCenter status=SUCCESS method=LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b] output=java.lang.NullPointerException
	at io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(LoginServiceRegCenterDetailTest.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceRegCenterDetailTest@34f6515b]" test-instance-name="regClient_LoginService_invalidRegCenterEmpty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceRegCenterDetailTest.testGetRegistrationCenterDetails(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- io.mosip.registration.test.LoginServiceRegCenterDetailTest -->
      <class name="io.mosip.registration.test.DocumentScannerServiceTest">
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_DocumentScannerService_scanDocument" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" is-config="true" status="PASS" duration-ms="5" finished-at="2020-08-27T17:28:46Z" started-at="2020-08-27T17:28:46Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:46Z" finished-at="2020-08-27T17:28:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="initialize()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="initialize" is-config="true" duration-ms="8903" started-at="2020-08-27T17:28:46Z" finished-at="2020-08-27T17:28:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.DocumentScannerServiceTest.getImageBytesFromBufferedImageTest() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="getImageBytesFromBufferedImageTest()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="regClient_DocumentScannerService_getImageBytesFromBufferedImage" duration-ms="28" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_DocumentScannerService_getImageBytesFromBufferedImage -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=DocumentScannerServiceTest.getImageBytesFromBufferedImageTest()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.DocumentScannerServiceTest.getImageBytesFromBufferedImageTest() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.DocumentScannerServiceTest.getImageBytesFromBufferedImageTestNull() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="getImageBytesFromBufferedImageTestNull()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="regClient_DocumentScannerService_getImageBytesFromBufferedImageTestNull" duration-ms="3" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_DocumentScannerService_getImageBytesFromBufferedImageTestNull -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_DocumentScannerService_getImageBytesFromBufferedImage status=SUCCESS method=DocumentScannerServiceTest.getImageBytesFromBufferedImageTestNull()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.DocumentScannerServiceTest.getSingleImageAlternateFlowTest() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="getSingleImageAlternateFlowTest()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="regClient_DocumentScannerService_getSingleImageAlternateFlow" duration-ms="95" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_DocumentScannerService_getSingleImageAlternateFlow -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.DocumentScannerServiceTest.getImageBytesFromBufferedImageTestNull() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.DocumentScannerServiceTest.getSingleImageFromListTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="getSingleImageFromListTest()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="regClient_DocumentScannerService_getSingleImageFromList" duration-ms="12" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_DocumentScannerService_getSingleImageFromList -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.DocumentScannerServiceTest.getSingleImageAlternateFlowTest() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_DocumentScannerService_getImageBytesFromBufferedImageTestNull status=SUCCESS method=DocumentScannerServiceTest.getSingleImageAlternateFlowTest()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.DocumentScannerServiceTest.getSingleImageFromListTestNull()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_DocumentScannerService_getSingleImageAlternateFlow status=SUCCESS method=DocumentScannerServiceTest.getSingleImageFromListTest()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.DocumentScannerServiceTest.getSingleImageFromListTestNull()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.DocumentScannerServiceTest.getSingleImageFromListTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.DocumentScannerServiceTest.getSinglePDFInBytesTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="getSingleImageFromListTestNull()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="regClient_DocumentScannerService_getSingleImageFromListTestNull" duration-ms="0" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_DocumentScannerService_getSingleImageFromListTestNull -->
        <test-method status="PASS" signature="getSinglePDFInBytesTest()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="regClient_DocumentScannerService_getSinglePDFInBytes" duration-ms="822" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:56Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_DocumentScannerService_getSinglePDFInBytes -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:55Z" finished-at="2020-08-27T17:28:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_DocumentScannerService_getSingleImageFromList status=SUCCESS method=DocumentScannerServiceTest.getSingleImageFromListTestNull()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:28:56Z" finished-at="2020-08-27T17:28:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.DocumentScannerServiceTest.isScannerConnectedTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:56Z" finished-at="2020-08-27T17:28:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.DocumentScannerServiceTest.getSinglePDFInBytesTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:56Z" finished-at="2020-08-27T17:28:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_DocumentScannerService_getSingleImageFromListTestNull status=SUCCESS method=DocumentScannerServiceTest.getSinglePDFInBytesTest()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:28:56Z" finished-at="2020-08-27T17:28:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_DocumentScannerService_getSinglePDFInBytes status=SUCCESS method=DocumentScannerServiceTest.isScannerConnectedTest()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="isScannerConnectedTest()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="regClient_DocumentScannerService_isScannerConnected" duration-ms="0" started-at="2020-08-27T17:28:56Z" finished-at="2020-08-27T17:28:56Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_DocumentScannerService_isScannerConnected -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:56Z" finished-at="2020-08-27T17:28:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.DocumentScannerServiceTest.pdfToImagesTest() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="pdfToImagesTest()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="regClient_DocumentScannerService_pdfToImages" duration-ms="208" started-at="2020-08-27T17:28:56Z" finished-at="2020-08-27T17:28:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_DocumentScannerService_pdfToImages -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:56Z" finished-at="2020-08-27T17:28:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.DocumentScannerServiceTest.isScannerConnectedTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:57Z" finished-at="2020-08-27T17:28:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.DocumentScannerServiceTest.pdfToImagesTestNull()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="pdfToImagesTestNull()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="regClient_DocumentScannerService_pdfToImagesTestNull" duration-ms="44" started-at="2020-08-27T17:28:57Z" finished-at="2020-08-27T17:28:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_DocumentScannerService_pdfToImagesTestNull -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:57Z" finished-at="2020-08-27T17:28:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.DocumentScannerServiceTest.pdfToImagesTest() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:57Z" finished-at="2020-08-27T17:28:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_DocumentScannerService_isScannerConnected status=SUCCESS method=DocumentScannerServiceTest.pdfToImagesTest()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:28:57Z" finished-at="2020-08-27T17:28:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.DocumentScannerServiceTest.pdfToImagesTestNull()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:57Z" finished-at="2020-08-27T17:28:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_DocumentScannerService_pdfToImages status=SUCCESS method=DocumentScannerServiceTest.pdfToImagesTestNull()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:57Z" finished-at="2020-08-27T17:28:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_DocumentScannerService_pdfToImagesTestNull status=SUCCESS method=DocumentScannerServiceTest.scanDocumentTest()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:57Z" finished-at="2020-08-27T17:28:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.DocumentScannerServiceTest.scanDocumentTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="scanDocumentTest()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="regClient_DocumentScannerService_scanDocument" duration-ms="0" started-at="2020-08-27T17:28:57Z" finished-at="2020-08-27T17:28:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_DocumentScannerService_scanDocument -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:57Z" finished-at="2020-08-27T17:28:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.DocumentScannerServiceTest@39d76cb5]" test-instance-name="regClient_DocumentScannerService_scanDocument" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:57Z" finished-at="2020-08-27T17:28:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.DocumentScannerServiceTest.scanDocumentTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- io.mosip.registration.test.DocumentScannerServiceTest -->
      <class name="io.mosip.registration.test.SMSNotificationServiceTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:51Z" finished-at="2020-08-27T17:36:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" is-config="true" status="PASS" duration-ms="3" finished-at="2020-08-27T17:36:51Z" started-at="2020-08-27T17:36:51Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="setUp" is-config="true" duration-ms="7403" started-at="2020-08-27T17:36:51Z" finished-at="2020-08-27T17:36:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:51Z" finished-at="2020-08-27T17:36:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.SMSNotificationServiceTest.validateSendSMSTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validateSendSMSTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="regClient_SMSNotificationService_validateSendSMSTest_smoke" duration-ms="165" started-at="2020-08-27T17:36:59Z" data-provider="smsDataProvider" finished-at="2020-08-27T17:36:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_SMSNotificationService_validateSendSMSTest_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_SMSNotificationService_validateSendSMSTest_smoke -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:59Z" finished-at="2020-08-27T17:36:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.SMSNotificationServiceTest.validateSendSMSTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:59Z" finished-at="2020-08-27T17:36:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.SMSNotificationServiceTest.validateSendSMSTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:59Z" finished-at="2020-08-27T17:36:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=SMSNotificationServiceTest.validateSendSMSTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="setUp" is-config="true" duration-ms="5260" started-at="2020-08-27T17:36:59Z" finished-at="2020-08-27T17:37:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="validateSendSMSTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="regClient_SMSNotificationService_invalid_message_empty" duration-ms="8" started-at="2020-08-27T17:37:04Z" data-provider="smsDataProvider" finished-at="2020-08-27T17:37:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_SMSNotificationService_invalid_message_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: PCC-NSI-001 --> Message and Number can not be null
	at io.mosip.registration.service.template.impl.NotificationServiceImpl.sendSMS(NotificationServiceImpl.java:95)
	at io.mosip.registration.test.SMSNotificationServiceTest.validateSendSMSTest(SMSNotificationServiceTest.java:91)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_SMSNotificationService_invalid_message_empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:04Z" finished-at="2020-08-27T17:37:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_SMSNotificationService_validateSendSMSTest_smoke status=SUCCESS method=SMSNotificationServiceTest.validateSendSMSTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5] output=io.mosip.registration.exception.RegBaseCheckedException: PCC-NSI-001 --> Message and Number can not be null
	at io.mosip.registration.service.template.impl.NotificationServiceImpl.sendSMS(NotificationServiceImpl.java:95)
	at io.mosip.registration.test.SMSNotificationServiceTest.validateSendSMSTest(SMSNotificationServiceTest.java:91)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:04Z" finished-at="2020-08-27T17:37:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.SMSNotificationServiceTest.validateSendSMSTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="setUp" is-config="true" duration-ms="4457" started-at="2020-08-27T17:37:04Z" finished-at="2020-08-27T17:37:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:04Z" finished-at="2020-08-27T17:37:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.SMSNotificationServiceTest.validateSendSMSTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validateSendSMSTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="regClient_SMSNotificationService_invalid_mobileNumber" duration-ms="160" started-at="2020-08-27T17:37:09Z" data-provider="smsDataProvider" finished-at="2020-08-27T17:37:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_SMSNotificationService_invalid_mobileNumber]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_SMSNotificationService_invalid_mobileNumber -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:09Z" finished-at="2020-08-27T17:37:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.SMSNotificationServiceTest.validateSendSMSTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:09Z" finished-at="2020-08-27T17:37:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.SMSNotificationServiceTest.validateSendSMSTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="setUp" is-config="true" duration-ms="4167" started-at="2020-08-27T17:37:09Z" finished-at="2020-08-27T17:37:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:09Z" finished-at="2020-08-27T17:37:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_SMSNotificationService_invalid_message_empty status=SUCCESS method=SMSNotificationServiceTest.validateSendSMSTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="validateSendSMSTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="regClient_SMSNotificationService_invalid_mobileNumber_empty" duration-ms="6" started-at="2020-08-27T17:37:13Z" data-provider="smsDataProvider" finished-at="2020-08-27T17:37:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_SMSNotificationService_invalid_mobileNumber_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: PCC-NSI-001 --> Message and Number can not be null
	at io.mosip.registration.service.template.impl.NotificationServiceImpl.sendSMS(NotificationServiceImpl.java:95)
	at io.mosip.registration.test.SMSNotificationServiceTest.validateSendSMSTest(SMSNotificationServiceTest.java:91)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_SMSNotificationService_invalid_mobileNumber_empty -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="setUp" is-config="true" duration-ms="3473" started-at="2020-08-27T17:37:13Z" finished-at="2020-08-27T17:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:13Z" finished-at="2020-08-27T17:37:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_SMSNotificationService_invalid_mobileNumber status=SUCCESS method=SMSNotificationServiceTest.validateSendSMSTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5] output=io.mosip.registration.exception.RegBaseCheckedException: PCC-NSI-001 --> Message and Number can not be null
	at io.mosip.registration.service.template.impl.NotificationServiceImpl.sendSMS(NotificationServiceImpl.java:95)
	at io.mosip.registration.test.SMSNotificationServiceTest.validateSendSMSTest(SMSNotificationServiceTest.java:91)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:13Z" finished-at="2020-08-27T17:37:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.SMSNotificationServiceTest.validateSendSMSTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:13Z" finished-at="2020-08-27T17:37:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.SMSNotificationServiceTest.validateSendSMSTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validateSendSMSTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="regClient_SMSNotificationService_invalid_registrationId_empty" duration-ms="156" started-at="2020-08-27T17:37:16Z" data-provider="smsDataProvider" finished-at="2020-08-27T17:37:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_SMSNotificationService_invalid_registrationId_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_SMSNotificationService_invalid_registrationId_empty -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:17Z" finished-at="2020-08-27T17:37:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:17Z" finished-at="2020-08-27T17:37:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_SMSNotificationService_invalid_mobileNumber_empty status=SUCCESS method=SMSNotificationServiceTest.validateSendSMSTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.SMSNotificationServiceTest@1e4d3ce5]" test-instance-name="regClient_SMSNotificationService_invalid_registrationId_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:17Z" finished-at="2020-08-27T17:37:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.SMSNotificationServiceTest.validateSendSMSTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- io.mosip.registration.test.SMSNotificationServiceTest -->
      <class name="io.mosip.registration.test.EmailNotificationServiceTest">
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" is-config="true" status="PASS" duration-ms="4" finished-at="2020-08-27T17:30:01Z" started-at="2020-08-27T17:30:01Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:01Z" finished-at="2020-08-27T17:30:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:01Z" finished-at="2020-08-27T17:30:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.EmailNotificationServiceTest.validateEmailTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setValue()[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="setValue" is-config="true" duration-ms="8864" started-at="2020-08-27T17:30:01Z" finished-at="2020-08-27T17:30:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setValue -->
        <test-method status="PASS" signature="validateEmailTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="regClient_EmailNotificationService_validateSendSMSTest_smoke" duration-ms="1192" started-at="2020-08-27T17:30:10Z" data-provider="EmailDataProvider" finished-at="2020-08-27T17:30:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_EmailNotificationService_validateSendSMSTest_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_EmailNotificationService_validateSendSMSTest_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:11Z" finished-at="2020-08-27T17:30:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=EmailNotificationServiceTest.validateEmailTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:30:11Z" finished-at="2020-08-27T17:30:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.EmailNotificationServiceTest.validateEmailTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:11Z" finished-at="2020-08-27T17:30:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.EmailNotificationServiceTest.validateEmailTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setValue()[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="setValue" is-config="true" duration-ms="10569" started-at="2020-08-27T17:30:11Z" finished-at="2020-08-27T17:30:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setValue -->
        <test-method status="PASS" signature="validateEmailTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="regClient_EmailNotificationService_invalid_EmailID" duration-ms="178" started-at="2020-08-27T17:30:22Z" data-provider="EmailDataProvider" finished-at="2020-08-27T17:30:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_EmailNotificationService_invalid_EmailID]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_EmailNotificationService_invalid_EmailID -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:22Z" finished-at="2020-08-27T17:30:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_EmailNotificationService_validateSendSMSTest_smoke status=SUCCESS method=EmailNotificationServiceTest.validateEmailTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:22Z" finished-at="2020-08-27T17:30:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.EmailNotificationServiceTest.validateEmailTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setValue()[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="setValue" is-config="true" duration-ms="4625" started-at="2020-08-27T17:30:22Z" finished-at="2020-08-27T17:30:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setValue -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:22Z" finished-at="2020-08-27T17:30:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.EmailNotificationServiceTest.validateEmailTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validateEmailTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="regClient_EmailNotificationService_invalid_EmailID_empty" duration-ms="7" started-at="2020-08-27T17:30:27Z" data-provider="EmailDataProvider" finished-at="2020-08-27T17:30:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_EmailNotificationService_invalid_EmailID_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Exception : PCC-NSI-002 --> Message and Email can not be null]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_EmailNotificationService_invalid_EmailID_empty -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:27Z" finished-at="2020-08-27T17:30:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.EmailNotificationServiceTest.validateEmailTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setValue()[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="setValue" is-config="true" duration-ms="3877" started-at="2020-08-27T17:30:27Z" finished-at="2020-08-27T17:30:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setValue -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:27Z" finished-at="2020-08-27T17:30:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.EmailNotificationServiceTest.validateEmailTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:27Z" finished-at="2020-08-27T17:30:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_EmailNotificationService_invalid_EmailID status=SUCCESS method=EmailNotificationServiceTest.validateEmailTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d] output=Exception : PCC-NSI-002 --> Message and Email can not be null]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="validateEmailTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="regClient_EmailNotificationService_invalid_message_empty" duration-ms="8" started-at="2020-08-27T17:30:30Z" data-provider="EmailDataProvider" finished-at="2020-08-27T17:30:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_EmailNotificationService_invalid_message_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Exception : PCC-NSI-002 --> Message and Email can not be null]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_EmailNotificationService_invalid_message_empty -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:30Z" finished-at="2020-08-27T17:30:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.EmailNotificationServiceTest.validateEmailTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setValue()[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="setValue" is-config="true" duration-ms="7459" started-at="2020-08-27T17:30:30Z" finished-at="2020-08-27T17:30:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setValue -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:30Z" finished-at="2020-08-27T17:30:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.EmailNotificationServiceTest.validateEmailTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:30Z" finished-at="2020-08-27T17:30:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_EmailNotificationService_invalid_EmailID_empty status=SUCCESS method=EmailNotificationServiceTest.validateEmailTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d] output=Exception : PCC-NSI-002 --> Message and Email can not be null]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="validateEmailTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="regClient_EmailNotificationService_invalid_registrationId_empty" duration-ms="158" started-at="2020-08-27T17:30:38Z" data-provider="EmailDataProvider" finished-at="2020-08-27T17:30:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_EmailNotificationService_invalid_registrationId_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_EmailNotificationService_invalid_registrationId_empty -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:38Z" finished-at="2020-08-27T17:30:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.EmailNotificationServiceTest.validateEmailTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:38Z" finished-at="2020-08-27T17:30:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d]" test-instance-name="regClient_EmailNotificationService_invalid_registrationId_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:38Z" finished-at="2020-08-27T17:30:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_EmailNotificationService_invalid_message_empty status=SUCCESS method=EmailNotificationServiceTest.validateEmailTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.EmailNotificationServiceTest@1c39680d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.registration.test.EmailNotificationServiceTest -->
      <class name="io.mosip.registration.test.PolicySyncServiceTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.PolicySyncServiceTest@59d4cd39]" test-instance-name="regClient_PolicySyncService_verifyingMessage" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:21Z" finished-at="2020-08-27T17:34:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_PolicySyncService_verifyingMessage" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.PolicySyncServiceTest@59d4cd39]" is-config="true" status="PASS" duration-ms="3" finished-at="2020-08-27T17:34:21Z" started-at="2020-08-27T17:34:21Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PolicySyncServiceTest@59d4cd39]" test-instance-name="regClient_PolicySyncService_verifyingMessage" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:21Z" finished-at="2020-08-27T17:34:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PolicySyncServiceTest.regClient_PolicySyncService_verifyingCode()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="preSetUp()[pri:0, instance:io.mosip.registration.test.PolicySyncServiceTest@59d4cd39]" test-instance-name="regClient_PolicySyncService_verifyingMessage" name="preSetUp" is-config="true" duration-ms="12617" started-at="2020-08-27T17:34:21Z" finished-at="2020-08-27T17:34:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preSetUp -->
        <test-method status="PASS" signature="regClient_PolicySyncService_verifyingCode()[pri:0, instance:io.mosip.registration.test.PolicySyncServiceTest@59d4cd39]" test-instance-name="regClient_PolicySyncService_verifyingMessage" name="regClient_PolicySyncService_verifyingCode" duration-ms="309" started-at="2020-08-27T17:34:34Z" finished-at="2020-08-27T17:34:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PolicySyncService_verifyingCode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PolicySyncServiceTest@59d4cd39]" test-instance-name="regClient_PolicySyncService_verifyingMessage" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:34Z" finished-at="2020-08-27T17:34:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=PolicySyncServiceTest.regClient_PolicySyncService_verifyingCode()[pri:0, instance:io.mosip.registration.test.PolicySyncServiceTest@59d4cd39] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PolicySyncServiceTest@59d4cd39]" test-instance-name="regClient_PolicySyncService_verifyingMessage" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:34:34Z" finished-at="2020-08-27T17:34:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PolicySyncServiceTest.regClient_PolicySyncService_verifyingCode()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PolicySyncServiceTest@59d4cd39]" test-instance-name="regClient_PolicySyncService_verifyingMessage" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:34Z" finished-at="2020-08-27T17:34:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PolicySyncServiceTest.regClient_PolicySyncService_verifyingMessage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="preSetUp()[pri:0, instance:io.mosip.registration.test.PolicySyncServiceTest@59d4cd39]" test-instance-name="regClient_PolicySyncService_verifyingMessage" name="preSetUp" is-config="true" duration-ms="10556" started-at="2020-08-27T17:34:34Z" finished-at="2020-08-27T17:34:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preSetUp -->
        <test-method status="PASS" signature="regClient_PolicySyncService_verifyingMessage()[pri:0, instance:io.mosip.registration.test.PolicySyncServiceTest@59d4cd39]" test-instance-name="regClient_PolicySyncService_verifyingMessage" name="regClient_PolicySyncService_verifyingMessage" duration-ms="420" started-at="2020-08-27T17:34:45Z" finished-at="2020-08-27T17:34:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PolicySyncService_verifyingMessage -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.PolicySyncServiceTest@59d4cd39]" test-instance-name="regClient_PolicySyncService_verifyingMessage" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:45Z" finished-at="2020-08-27T17:34:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PolicySyncServiceTest@59d4cd39]" test-instance-name="regClient_PolicySyncService_verifyingMessage" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:45Z" finished-at="2020-08-27T17:34:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PolicySyncServiceTest.regClient_PolicySyncService_verifyingMessage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PolicySyncServiceTest@59d4cd39]" test-instance-name="regClient_PolicySyncService_verifyingMessage" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:45Z" finished-at="2020-08-27T17:34:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PolicySyncService_verifyingCode status=SUCCESS method=PolicySyncServiceTest.regClient_PolicySyncService_verifyingMessage()[pri:0, instance:io.mosip.registration.test.PolicySyncServiceTest@59d4cd39] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.registration.test.PolicySyncServiceTest -->
      <class name="io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest">
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_RegpacketStatusService_Invalid_Sync_packet_RegID_with_lessthan_29chars" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest@2b9ed6da]" is-config="true" status="PASS" duration-ms="3" finished-at="2020-08-27T17:36:08Z" started-at="2020-08-27T17:36:08Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest@2b9ed6da]" test-instance-name="regClient_RegpacketStatusService_Invalid_Sync_packet_RegID_with_lessthan_29chars" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:08Z" finished-at="2020-08-27T17:36:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest@2b9ed6da]" test-instance-name="regClient_RegpacketStatusService_Invalid_Sync_packet_RegID_with_lessthan_29chars" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:08Z" finished-at="2020-08-27T17:36:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setup()[pri:0, instance:io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest@2b9ed6da]" test-instance-name="regClient_RegpacketStatusService_Invalid_Sync_packet_RegID_with_lessthan_29chars" name="setup" is-config="true" duration-ms="5480" started-at="2020-08-27T17:36:08Z" finished-at="2020-08-27T17:36:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest@2b9ed6da]" test-instance-name="regClient_RegpacketStatusService_Invalid_Sync_packet_RegID_with_lessthan_29chars" name="regClient_RegpacketStatusService_SyncPackets_with_ClientStatusCode_PUSHED_smoke" duration-ms="9997" started-at="2020-08-27T17:36:14Z" data-provider="RegPacketStatusDataProvider" finished-at="2020-08-27T17:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_RegpacketStatusService_SyncPackets_with_ClientStatusCode_PUSHED_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_RegpacketStatusService_SyncPackets_with_ClientStatusCode_PUSHED_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest@2b9ed6da]" test-instance-name="regClient_RegpacketStatusService_Invalid_Sync_packet_RegID_with_lessthan_29chars" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:36:24Z" finished-at="2020-08-27T17:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=RegPacketStatusServicePacketSyncStatusTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest@2b9ed6da] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest@2b9ed6da]" test-instance-name="regClient_RegpacketStatusService_Invalid_Sync_packet_RegID_with_lessthan_29chars" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:24Z" finished-at="2020-08-27T17:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setup()[pri:0, instance:io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest@2b9ed6da]" test-instance-name="regClient_RegpacketStatusService_Invalid_Sync_packet_RegID_with_lessthan_29chars" name="setup" is-config="true" duration-ms="7586" started-at="2020-08-27T17:36:24Z" finished-at="2020-08-27T17:36:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest@2b9ed6da]" test-instance-name="regClient_RegpacketStatusService_Invalid_Sync_packet_RegID_with_lessthan_29chars" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:24Z" finished-at="2020-08-27T17:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest@2b9ed6da]" test-instance-name="regClient_RegpacketStatusService_Invalid_Sync_packet_RegID_with_lessthan_29chars" name="regClient_RegpacketStatusService_Invalid_Sync_packet_RegID_with_lessthan_29chars" duration-ms="2611" started-at="2020-08-27T17:36:31Z" data-provider="RegPacketStatusDataProvider" finished-at="2020-08-27T17:36:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_RegpacketStatusService_Invalid_Sync_packet_RegID_with_lessthan_29chars]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[io.mosip.registration.exception.RegBaseUncheckedException: PCC-RDA-001 --> Exception while saving the registration details to DB; 
nested exception is io.mosip.kernel.core.dataaccess.exception.DataAccessLayerException: KER-DAH-001 --> org.hibernate.exception.ConstraintViolationException: could not execute statement; 
nested exception is javax.persistence.PersistenceException: org.hibernate.exception.ConstraintViolationException: could not execute statement
	at io.mosip.registration.dao.impl.RegistrationDAOImpl.save(RegistrationDAOImpl.java:103)
	at sun.reflect.GeneratedMethodAccessor853.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:197)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy183.save(Unknown Source)
	at io.mosip.registration.service.packet.impl.PacketHandlerServiceImpl.handle(PacketHandlerServiceImpl.java:159)
	at io.mosip.registration.util.CommonUtil.packetCreation(CommonUtil.java:559)
	at io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest.validatePacketCreation(RegPacketStatusServicePacketSyncStatusTest.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
Caused by: io.mosip.kernel.core.dataaccess.exception.DataAccessLayerException: KER-DAH-001 --> org.hibernate.exception.ConstraintViolationException: could not execute statement; 
nested exception is javax.persistence.PersistenceException: org.hibernate.exception.ConstraintViolationException: could not execute statement
	at io.mosip.kernel.dataaccess.hibernate.repository.impl.HibernateRepositoryImpl.create(HibernateRepositoryImpl.java:71)
	at sun.reflect.GeneratedMethodAccessor257.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:377)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:629)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:593)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:578)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy182.create(Unknown Source)
	at io.mosip.registration.dao.impl.RegistrationDAOImpl.save(RegistrationDAOImpl.java:97)
	... 43 more
Caused by: javax.persistence.PersistenceException: org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:149)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:157)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:164)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1443)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1423)
	at sun.reflect.GeneratedMethodAccessor94.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:304)
	at com.sun.proxy.$Proxy124.flush(Unknown Source)
	at io.mosip.kernel.dataaccess.hibernate.repository.impl.HibernateRepositoryImpl.create(HibernateRepositoryImpl.java:65)
	... 69 more
Caused by: org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:59)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:111)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:97)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:178)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3032)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3547)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:89)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:600)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:474)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:337)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1437)
	... 76 more
Caused by: org.apache.derby.shared.common.error.DerbySQLIntegrityConstraintViolationException: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'PK_REG_ID' defined on 'REGISTRATION'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(Unknown Source)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:175)
	... 84 more
Caused by: ERROR 23505: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'PK_REG_ID' defined on 'REGISTRATION'.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.sql.execute.IndexChanger.insertAndCheckDups(Unknown Source)
	at org.apache.derby.impl.sql.execute.IndexChanger.doInsert(Unknown Source)
	at org.apache.derby.impl.sql.execute.IndexChanger.insert(Unknown Source)
	at org.apache.derby.impl.sql.execute.IndexSetChanger.insert(Unknown Source)
	at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(Unknown Source)
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	... 89 more
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_RegpacketStatusService_Invalid_Sync_packet_RegID_with_lessthan_29chars -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest@2b9ed6da]" test-instance-name="regClient_RegpacketStatusService_Invalid_Sync_packet_RegID_with_lessthan_29chars" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:34Z" finished-at="2020-08-27T17:36:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest@2b9ed6da]" test-instance-name="regClient_RegpacketStatusService_Invalid_Sync_packet_RegID_with_lessthan_29chars" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:34Z" finished-at="2020-08-27T17:36:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest@2b9ed6da]" test-instance-name="regClient_RegpacketStatusService_Invalid_Sync_packet_RegID_with_lessthan_29chars" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:34Z" finished-at="2020-08-27T17:36:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_RegpacketStatusService_SyncPackets_with_ClientStatusCode_PUSHED_smoke status=SUCCESS method=RegPacketStatusServicePacketSyncStatusTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest@2b9ed6da] output=io.mosip.registration.exception.RegBaseUncheckedException: PCC-RDA-001 --> Exception while saving the registration details to DB; 
nested exception is io.mosip.kernel.core.dataaccess.exception.DataAccessLayerException: KER-DAH-001 --> org.hibernate.exception.ConstraintViolationException: could not execute statement; 
nested exception is javax.persistence.PersistenceException: org.hibernate.exception.ConstraintViolationException: could not execute statement
	at io.mosip.registration.dao.impl.RegistrationDAOImpl.save(RegistrationDAOImpl.java:103)
	at sun.reflect.GeneratedMethodAccessor853.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:197)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy183.save(Unknown Source)
	at io.mosip.registration.service.packet.impl.PacketHandlerServiceImpl.handle(PacketHandlerServiceImpl.java:159)
	at io.mosip.registration.util.CommonUtil.packetCreation(CommonUtil.java:559)
	at io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest.validatePacketCreation(RegPacketStatusServicePacketSyncStatusTest.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
Caused by: io.mosip.kernel.core.dataaccess.exception.DataAccessLayerException: KER-DAH-001 --> org.hibernate.exception.ConstraintViolationException: could not execute statement; 
nested exception is javax.persistence.PersistenceException: org.hibernate.exception.ConstraintViolationException: could not execute statement
	at io.mosip.kernel.dataaccess.hibernate.repository.impl.HibernateRepositoryImpl.create(HibernateRepositoryImpl.java:71)
	at sun.reflect.GeneratedMethodAccessor257.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:377)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:629)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:593)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:578)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy182.create(Unknown Source)
	at io.mosip.registration.dao.impl.RegistrationDAOImpl.save(RegistrationDAOImpl.java:97)
	... 43 more
Caused by: javax.persistence.PersistenceException: org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:149)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:157)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:164)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1443)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1423)
	at sun.reflect.GeneratedMethodAccessor94.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:304)
	at com.sun.proxy.$Proxy124.flush(Unknown Source)
	at io.mosip.kernel.dataaccess.hibernate.repository.impl.HibernateRepositoryImpl.create(HibernateRepositoryImpl.java:65)
	... 69 more
Caused by: org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:59)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:111)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:97)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:178)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3032)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3547)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:89)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:600)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:474)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:337)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1437)
	... 76 more
Caused by: org.apache.derby.shared.common.error.DerbySQLIntegrityConstraintViolationException: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'PK_REG_ID' defined on 'REGISTRATION'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(Unknown Source)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:175)
	... 84 more
Caused by: ERROR 23505: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'PK_REG_ID' defined on 'REGISTRATION'.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.sql.execute.IndexChanger.insertAndCheckDups(Unknown Source)
	at org.apache.derby.impl.sql.execute.IndexChanger.doInsert(Unknown Source)
	at org.apache.derby.impl.sql.execute.IndexChanger.insert(Unknown Source)
	at org.apache.derby.impl.sql.execute.IndexSetChanger.insert(Unknown Source)
	at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(Unknown Source)
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	... 89 more
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.registration.test.RegPacketStatusServicePacketSyncStatusTest -->
      <class name="io.mosip.registration.test.LoginServiceScreenAuthorizationTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.LoginServiceScreenAuthorizationTest@50313382]" test-instance-name="regClient_LoginService_invalidRole" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_LoginService_invalidRole" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.LoginServiceScreenAuthorizationTest@50313382]" is-config="true" status="PASS" duration-ms="5" finished-at="2020-08-27T17:30:46Z" started-at="2020-08-27T17:30:46Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceScreenAuthorizationTest@50313382]" test-instance-name="regClient_LoginService_invalidRole" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceScreenAuthorizationTest.testGetScreenAuthorizationDetails(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.LoginServiceScreenAuthorizationTest@50313382]" test-instance-name="regClient_LoginService_invalidRole" name="setUp" is-config="true" duration-ms="7632" started-at="2020-08-27T17:30:46Z" finished-at="2020-08-27T17:30:54Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testGetScreenAuthorizationDetails(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceScreenAuthorizationTest@50313382]" test-instance-name="regClient_LoginService_invalidRole" name="regClient_LoginService_validateScreenAuthorization_smoke" duration-ms="13" started-at="2020-08-27T17:30:54Z" data-provider="screenAuthorizationDataProvider" finished-at="2020-08-27T17:30:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LoginService_validateScreenAuthorization_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_LoginService_validateScreenAuthorization_smoke -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceScreenAuthorizationTest@50313382]" test-instance-name="regClient_LoginService_invalidRole" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:54Z" finished-at="2020-08-27T17:30:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceScreenAuthorizationTest.testGetScreenAuthorizationDetails(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.LoginServiceScreenAuthorizationTest@50313382]" test-instance-name="regClient_LoginService_invalidRole" name="setUp" is-config="true" duration-ms="4798" started-at="2020-08-27T17:30:54Z" finished-at="2020-08-27T17:30:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.LoginServiceScreenAuthorizationTest@50313382]" test-instance-name="regClient_LoginService_invalidRole" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:54Z" finished-at="2020-08-27T17:30:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=LoginServiceScreenAuthorizationTest.testGetScreenAuthorizationDetails(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceScreenAuthorizationTest@50313382] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceScreenAuthorizationTest@50313382]" test-instance-name="regClient_LoginService_invalidRole" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:54Z" finished-at="2020-08-27T17:30:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceScreenAuthorizationTest.testGetScreenAuthorizationDetails(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testGetScreenAuthorizationDetails(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceScreenAuthorizationTest@50313382]" test-instance-name="regClient_LoginService_invalidRole" name="regClient_LoginService_invalidRole" duration-ms="13" started-at="2020-08-27T17:30:59Z" data-provider="screenAuthorizationDataProvider" finished-at="2020-08-27T17:30:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LoginService_invalidRole]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_LoginService_invalidRole -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.LoginServiceScreenAuthorizationTest@50313382]" test-instance-name="regClient_LoginService_invalidRole" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:59Z" finished-at="2020-08-27T17:30:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.LoginServiceScreenAuthorizationTest@50313382]" test-instance-name="regClient_LoginService_invalidRole" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:59Z" finished-at="2020-08-27T17:30:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_LoginService_validateScreenAuthorization_smoke status=SUCCESS method=LoginServiceScreenAuthorizationTest.testGetScreenAuthorizationDetails(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceScreenAuthorizationTest@50313382] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceScreenAuthorizationTest@50313382]" test-instance-name="regClient_LoginService_invalidRole" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:59Z" finished-at="2020-08-27T17:30:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceScreenAuthorizationTest.testGetScreenAuthorizationDetails(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- io.mosip.registration.test.LoginServiceScreenAuthorizationTest -->
      <class name="io.mosip.registration.test.LoginServiceUpdateLoginParamTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.LoginServiceUpdateLoginParamTest@a37aefe]" test-instance-name="regClient_LoginService_invalidUserId" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:59Z" finished-at="2020-08-27T17:30:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_LoginService_invalidUserId" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.LoginServiceUpdateLoginParamTest@a37aefe]" is-config="true" status="PASS" duration-ms="4" finished-at="2020-08-27T17:30:59Z" started-at="2020-08-27T17:30:59Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.LoginServiceUpdateLoginParamTest@a37aefe]" test-instance-name="regClient_LoginService_invalidUserId" name="setUp" is-config="true" duration-ms="7709" started-at="2020-08-27T17:30:59Z" finished-at="2020-08-27T17:31:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceUpdateLoginParamTest@a37aefe]" test-instance-name="regClient_LoginService_invalidUserId" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:06Z" finished-at="2020-08-27T17:31:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceUpdateLoginParamTest.updateLoginParamsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="updateLoginParamsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceUpdateLoginParamTest@a37aefe]" test-instance-name="regClient_LoginService_invalidUserId" name="regClient_LoginService_validateLoginParam_smoke" duration-ms="5" started-at="2020-08-27T17:31:06Z" data-provider="updateLoginParamProvider" finished-at="2020-08-27T17:31:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LoginService_validateLoginParam_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_LoginService_validateLoginParam_smoke -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceUpdateLoginParamTest@a37aefe]" test-instance-name="regClient_LoginService_invalidUserId" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:06Z" finished-at="2020-08-27T17:31:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceUpdateLoginParamTest.updateLoginParamsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceUpdateLoginParamTest@a37aefe]" test-instance-name="regClient_LoginService_invalidUserId" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:31:06Z" finished-at="2020-08-27T17:31:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceUpdateLoginParamTest.updateLoginParamsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.LoginServiceUpdateLoginParamTest@a37aefe]" test-instance-name="regClient_LoginService_invalidUserId" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:06Z" finished-at="2020-08-27T17:31:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=LoginServiceUpdateLoginParamTest.updateLoginParamsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceUpdateLoginParamTest@a37aefe] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="updateLoginParamsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceUpdateLoginParamTest@a37aefe]" test-instance-name="regClient_LoginService_invalidUserId" name="regClient_LoginService_invalidUserId" duration-ms="5" started-at="2020-08-27T17:31:06Z" data-provider="updateLoginParamProvider" finished-at="2020-08-27T17:31:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LoginService_invalidUserId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_LoginService_invalidUserId -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceUpdateLoginParamTest@a37aefe]" test-instance-name="regClient_LoginService_invalidUserId" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:07Z" finished-at="2020-08-27T17:31:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceUpdateLoginParamTest.updateLoginParamsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.LoginServiceUpdateLoginParamTest@a37aefe]" test-instance-name="regClient_LoginService_invalidUserId" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:07Z" finished-at="2020-08-27T17:31:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_LoginService_validateLoginParam_smoke status=SUCCESS method=LoginServiceUpdateLoginParamTest.updateLoginParamsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceUpdateLoginParamTest@a37aefe] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.LoginServiceUpdateLoginParamTest@a37aefe]" test-instance-name="regClient_LoginService_invalidUserId" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:07Z" finished-at="2020-08-27T17:31:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- io.mosip.registration.test.LoginServiceUpdateLoginParamTest -->
      <class name="io.mosip.registration.test.RegistrationApprovalServiceTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:10Z" finished-at="2020-08-27T17:35:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" is-config="true" status="PASS" duration-ms="3" finished-at="2020-08-27T17:35:10Z" started-at="2020-08-27T17:35:10Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:35:10Z" finished-at="2020-08-27T17:35:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.RegistrationApprovalServiceTest.getEnrollmentByStatusTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="setTestCaseName" is-config="true" duration-ms="12257" started-at="2020-08-27T17:35:10Z" finished-at="2020-08-27T17:35:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="getEnrollmentByStatusTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="regClient_RegistrationApprovalService_getEnrolment_validateEnrolment_smoke" duration-ms="2747" started-at="2020-08-27T17:35:23Z" data-provider="enrolmentByStatus" finished-at="2020-08-27T17:35:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_RegistrationApprovalService_getEnrolment_validateEnrolment_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_RegistrationApprovalService_getEnrolment_validateEnrolment_smoke -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:25Z" finished-at="2020-08-27T17:35:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.RegistrationApprovalServiceTest.getEnrollmentByStatusTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="setTestCaseName" is-config="true" duration-ms="3423" started-at="2020-08-27T17:35:25Z" finished-at="2020-08-27T17:35:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:25Z" finished-at="2020-08-27T17:35:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=RegistrationApprovalServiceTest.getEnrollmentByStatusTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:25Z" finished-at="2020-08-27T17:35:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.RegistrationApprovalServiceTest.getEnrollmentByStatusTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="getEnrollmentByStatusTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="regClient_RegistrationApprovalService_getEnrolment_invalidStatus" duration-ms="21" started-at="2020-08-27T17:35:29Z" data-provider="enrolmentByStatus" finished-at="2020-08-27T17:35:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_RegistrationApprovalService_getEnrolment_invalidStatus]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_RegistrationApprovalService_getEnrolment_invalidStatus -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="setTestCaseName" is-config="true" duration-ms="3442" started-at="2020-08-27T17:35:29Z" finished-at="2020-08-27T17:35:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:29Z" finished-at="2020-08-27T17:35:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.RegistrationApprovalServiceTest.getEnrollmentByStatusTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:29Z" finished-at="2020-08-27T17:35:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_RegistrationApprovalService_getEnrolment_validateEnrolment_smoke status=SUCCESS method=RegistrationApprovalServiceTest.getEnrollmentByStatusTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:29Z" finished-at="2020-08-27T17:35:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.RegistrationApprovalServiceTest.getEnrollmentByStatusTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="getEnrollmentByStatusTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="regClient_RegistrationApprovalService_getEnrolment_invalidStatus_empty" duration-ms="13" started-at="2020-08-27T17:35:32Z" data-provider="enrolmentByStatus" finished-at="2020-08-27T17:35:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_RegistrationApprovalService_getEnrolment_invalidStatus_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Exception : REG-SER-PRS - 233 --> Status is empty or null]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_RegistrationApprovalService_getEnrolment_invalidStatus_empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:32Z" finished-at="2020-08-27T17:35:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_RegistrationApprovalService_getEnrolment_invalidStatus status=SUCCESS method=RegistrationApprovalServiceTest.getEnrollmentByStatusTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32] output=Exception : REG-SER-PRS - 233 --> Status is empty or null]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:32Z" finished-at="2020-08-27T17:35:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.RegistrationApprovalServiceTest.getEnrollmentByStatusTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="setTestCaseName" is-config="true" duration-ms="3343" started-at="2020-08-27T17:35:32Z" finished-at="2020-08-27T17:35:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:32Z" finished-at="2020-08-27T17:35:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.RegistrationApprovalServiceTest.getEnrollmentByStatusTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="getEnrollmentByStatusTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="regClient_RegistrationApprovalService_getEnrolment_invalidStatus_space" duration-ms="24" started-at="2020-08-27T17:35:36Z" data-provider="enrolmentByStatus" finished-at="2020-08-27T17:35:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_RegistrationApprovalService_getEnrolment_invalidStatus_space]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_RegistrationApprovalService_getEnrolment_invalidStatus_space -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:35:36Z" finished-at="2020-08-27T17:35:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_RegistrationApprovalService_getEnrolment_invalidStatus_empty status=SUCCESS method=RegistrationApprovalServiceTest.getEnrollmentByStatusTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:36Z" finished-at="2020-08-27T17:35:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.RegistrationApprovalServiceTest.getEnrollmentByStatusTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="setTestCaseName" is-config="true" duration-ms="3323" started-at="2020-08-27T17:35:36Z" finished-at="2020-08-27T17:35:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:36Z" finished-at="2020-08-27T17:35:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.RegistrationApprovalServiceTest.updateRegistrationTest(java.lang.String,org.json.JSONObject) throws io.mosip.registration.exception.RegBaseCheckedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="updateRegistrationTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" duration-ms="2843" started-at="2020-08-27T17:35:39Z" data-provider="updateRegistration" finished-at="2020-08-27T17:35:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_RegistrationApprovalService_validateUpdateRegistration_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_RegistrationApprovalService_validateUpdateRegistration_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:42Z" finished-at="2020-08-27T17:35:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_RegistrationApprovalService_getEnrolment_invalidStatus_space status=SUCCESS method=RegistrationApprovalServiceTest.updateRegistrationTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:42Z" finished-at="2020-08-27T17:35:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.RegistrationApprovalServiceTest.updateRegistrationTest(java.lang.String,org.json.JSONObject) throws io.mosip.registration.exception.RegBaseCheckedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.RegistrationApprovalServiceTest@4d518b32]" test-instance-name="regClient_RegistrationApprovalService_validateUpdateRegistration_smoke" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:42Z" finished-at="2020-08-27T17:35:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- io.mosip.registration.test.RegistrationApprovalServiceTest -->
      <class name="io.mosip.registration.test.MasterSyncProvianceByHierarchyCode">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:33:26Z" finished-at="2020-08-27T17:33:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" is-config="true" status="PASS" duration-ms="5" finished-at="2020-08-27T17:33:26Z" started-at="2020-08-27T17:33:26Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:33:26Z" finished-at="2020-08-27T17:33:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="setTestCaseName" is-config="true" duration-ms="7654" started-at="2020-08-27T17:33:26Z" finished-at="2020-08-27T17:33:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="verifyLocationByHierarchyCodeByHierarchyName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="regClient_ProvinceByHierarchyCode_validateLocationByparentLocationCode_smoke" duration-ms="10" started-at="2020-08-27T17:33:34Z" data-provider="ProvianceByHierarchyCode" finished-at="2020-08-27T17:33:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_ProvinceByHierarchyCode_validateLocationByparentLocationCode_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_ProvinceByHierarchyCode_validateLocationByparentLocationCode_smoke -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:33:34Z" finished-at="2020-08-27T17:33:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:33:34Z" finished-at="2020-08-27T17:33:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="setTestCaseName" is-config="true" duration-ms="11513" started-at="2020-08-27T17:33:34Z" finished-at="2020-08-27T17:33:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:33:34Z" finished-at="2020-08-27T17:33:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="verifyLocationByHierarchyCodeByHierarchyName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="regClient_ProvinceByHierarchyCode_invalid_hierarchyName_notPresentInDB" duration-ms="8" started-at="2020-08-27T17:33:46Z" data-provider="ProvianceByHierarchyCode" finished-at="2020-08-27T17:33:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_ProvinceByHierarchyCode_invalid_hierarchyName_notPresentInDB]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_ProvinceByHierarchyCode_invalid_hierarchyName_notPresentInDB -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:33:46Z" finished-at="2020-08-27T17:33:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_ProvinceByHierarchyCode_validateLocationByparentLocationCode_smoke status=SUCCESS method=MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:33:46Z" finished-at="2020-08-27T17:33:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:33:46Z" finished-at="2020-08-27T17:33:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="setTestCaseName" is-config="true" duration-ms="14879" started-at="2020-08-27T17:33:46Z" finished-at="2020-08-27T17:34:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="verifyLocationByHierarchyCodeByHierarchyName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="regClient_ProvinceByHierarchyCode_invalid_langCode_empty" duration-ms="6" started-at="2020-08-27T17:34:00Z" data-provider="ProvianceByHierarchyCode" finished-at="2020-08-27T17:34:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_ProvinceByHierarchyCode_invalid_langCode_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-003 --> master sync service code and language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.findProvianceByHierarchyCode(MasterSyncServiceImpl.java:259)
	at io.mosip.registration.test.MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(MasterSyncProvianceByHierarchyCode.java:139)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_ProvinceByHierarchyCode_invalid_langCode_empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:00Z" finished-at="2020-08-27T17:34:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_ProvinceByHierarchyCode_invalid_hierarchyName_notPresentInDB status=SUCCESS method=MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d] output=io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-003 --> master sync service code and language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.findProvianceByHierarchyCode(MasterSyncServiceImpl.java:259)
	at io.mosip.registration.test.MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(MasterSyncProvianceByHierarchyCode.java:139)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:00Z" finished-at="2020-08-27T17:34:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="setTestCaseName" is-config="true" duration-ms="11806" started-at="2020-08-27T17:34:00Z" finished-at="2020-08-27T17:34:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:00Z" finished-at="2020-08-27T17:34:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="verifyLocationByHierarchyCodeByHierarchyName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="regClient_ProvinceByHierarchyCode_invalid_langCode_notPresentInDB" duration-ms="9" started-at="2020-08-27T17:34:12Z" data-provider="ProvianceByHierarchyCode" finished-at="2020-08-27T17:34:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_ProvinceByHierarchyCode_invalid_langCode_notPresentInDB]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_ProvinceByHierarchyCode_invalid_langCode_notPresentInDB -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:12Z" finished-at="2020-08-27T17:34:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_ProvinceByHierarchyCode_invalid_langCode_empty status=SUCCESS method=MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:34:12Z" finished-at="2020-08-27T17:34:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="setTestCaseName" is-config="true" duration-ms="8972" started-at="2020-08-27T17:34:12Z" finished-at="2020-08-27T17:34:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:12Z" finished-at="2020-08-27T17:34:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="verifyLocationByHierarchyCodeByHierarchyName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" duration-ms="6" started-at="2020-08-27T17:34:21Z" data-provider="ProvianceByHierarchyCode" finished-at="2020-08-27T17:34:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-003 --> master sync service code and language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.findProvianceByHierarchyCode(MasterSyncServiceImpl.java:259)
	at io.mosip.registration.test.MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(MasterSyncProvianceByHierarchyCode.java:139)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:34:21Z" finished-at="2020-08-27T17:34:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_ProvinceByHierarchyCode_invalid_langCode_notPresentInDB status=SUCCESS method=MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d] output=io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-003 --> master sync service code and language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.findProvianceByHierarchyCode(MasterSyncServiceImpl.java:259)
	at io.mosip.registration.test.MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(MasterSyncProvianceByHierarchyCode.java:139)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:21Z" finished-at="2020-08-27T17:34:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncProvianceByHierarchyCode.verifyLocationByHierarchyCodeByHierarchyName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.MasterSyncProvianceByHierarchyCode@27508c5d]" test-instance-name="regClient_ProvinceByHierarchyCode_invalid_parentLocationCode_empty" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:21Z" finished-at="2020-08-27T17:34:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- io.mosip.registration.test.MasterSyncProvianceByHierarchyCode -->
      <class name="io.mosip.registration.test.SyncStatusValidatorServiceTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.SyncStatusValidatorServiceTest@2fba3fc4]" test-instance-name="regClient_SyncStatusValidatorService_validate_validatingSucessResponse" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:23Z" finished-at="2020-08-27T17:37:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_SyncStatusValidatorService_validate_validatingSucessResponse" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.SyncStatusValidatorServiceTest@2fba3fc4]" is-config="true" status="PASS" duration-ms="3" finished-at="2020-08-27T17:37:23Z" started-at="2020-08-27T17:37:23Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.SyncStatusValidatorServiceTest@2fba3fc4]" test-instance-name="regClient_SyncStatusValidatorService_validate_validatingSucessResponse" name="setUp" is-config="true" duration-ms="4236" started-at="2020-08-27T17:37:23Z" finished-at="2020-08-27T17:37:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="regClient_SyncStatusValidatorService_validatingErrorResponse()[pri:0, instance:io.mosip.registration.test.SyncStatusValidatorServiceTest@2fba3fc4]" test-instance-name="regClient_SyncStatusValidatorService_validate_validatingSucessResponse" name="regClient_SyncStatusValidatorService_validate_validatingErrorResponse" duration-ms="152" started-at="2020-08-27T17:37:28Z" finished-at="2020-08-27T17:37:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_SyncStatusValidatorService_validate_validatingErrorResponse -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.SyncStatusValidatorServiceTest@2fba3fc4]" test-instance-name="regClient_SyncStatusValidatorService_validate_validatingSucessResponse" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:28Z" finished-at="2020-08-27T17:37:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.SyncStatusValidatorServiceTest.regClient_SyncStatusValidatorService_validatingErrorResponse()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.SyncStatusValidatorServiceTest@2fba3fc4]" test-instance-name="regClient_SyncStatusValidatorService_validate_validatingSucessResponse" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:28Z" finished-at="2020-08-27T17:37:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=SyncStatusValidatorServiceTest.regClient_SyncStatusValidatorService_validatingErrorResponse()[pri:0, instance:io.mosip.registration.test.SyncStatusValidatorServiceTest@2fba3fc4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.SyncStatusValidatorServiceTest@2fba3fc4]" test-instance-name="regClient_SyncStatusValidatorService_validate_validatingSucessResponse" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:37:28Z" finished-at="2020-08-27T17:37:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.SyncStatusValidatorServiceTest.regClient_SyncStatusValidatorService_validatingErrorResponse()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.SyncStatusValidatorServiceTest@2fba3fc4]" test-instance-name="regClient_SyncStatusValidatorService_validate_validatingSucessResponse" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:28Z" finished-at="2020-08-27T17:37:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.SyncStatusValidatorServiceTest.regClient_SyncStatusValidatorService_validatingSucessResponse()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="regClient_SyncStatusValidatorService_validatingSucessResponse()[pri:0, instance:io.mosip.registration.test.SyncStatusValidatorServiceTest@2fba3fc4]" test-instance-name="regClient_SyncStatusValidatorService_validate_validatingSucessResponse" name="regClient_SyncStatusValidatorService_validate_validatingSucessResponse" duration-ms="113" started-at="2020-08-27T17:37:28Z" finished-at="2020-08-27T17:37:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_SyncStatusValidatorService_validate_validatingSucessResponse -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.SyncStatusValidatorServiceTest@2fba3fc4]" test-instance-name="regClient_SyncStatusValidatorService_validate_validatingSucessResponse" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:28Z" finished-at="2020-08-27T17:37:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_SyncStatusValidatorService_validate_validatingErrorResponse status=SUCCESS method=SyncStatusValidatorServiceTest.regClient_SyncStatusValidatorService_validatingSucessResponse()[pri:0, instance:io.mosip.registration.test.SyncStatusValidatorServiceTest@2fba3fc4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.SyncStatusValidatorServiceTest@2fba3fc4]" test-instance-name="regClient_SyncStatusValidatorService_validate_validatingSucessResponse" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:28Z" finished-at="2020-08-27T17:37:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.SyncStatusValidatorServiceTest@2fba3fc4]" test-instance-name="regClient_SyncStatusValidatorService_validate_validatingSucessResponse" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:28Z" finished-at="2020-08-27T17:37:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.SyncStatusValidatorServiceTest.regClient_SyncStatusValidatorService_validatingSucessResponse()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- io.mosip.registration.test.SyncStatusValidatorServiceTest -->
      <class name="io.mosip.registration.test.MasterSyncGenderDetail">
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" is-config="true" status="PASS" duration-ms="4" finished-at="2020-08-27T17:31:46Z" started-at="2020-08-27T17:31:46Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:46Z" finished-at="2020-08-27T17:31:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:46Z" finished-at="2020-08-27T17:31:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncGenderDetail.verifyGenderDetailByCode(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="setTestCaseName" is-config="true" duration-ms="5753" started-at="2020-08-27T17:31:46Z" finished-at="2020-08-27T17:31:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="verifyGenderDetailByCode(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="regClient_GenderDetail_validateBlackListedWord_smoke" duration-ms="2939" started-at="2020-08-27T17:31:52Z" data-provider="GenderDetail" finished-at="2020-08-27T17:31:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_GenderDetail_validateBlackListedWord_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_GenderDetail_validateBlackListedWord_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:31:55Z" finished-at="2020-08-27T17:31:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=MasterSyncGenderDetail.verifyGenderDetailByCode(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="setTestCaseName" is-config="true" duration-ms="4816" started-at="2020-08-27T17:31:55Z" finished-at="2020-08-27T17:32:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:55Z" finished-at="2020-08-27T17:31:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncGenderDetail.verifyGenderDetailByCode(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:55Z" finished-at="2020-08-27T17:31:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncGenderDetail.verifyGenderDetailByCode(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="verifyGenderDetailByCode(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="regClient_GenderDetail_invalid_langCode_empty" duration-ms="2668" started-at="2020-08-27T17:32:00Z" data-provider="GenderDetail" finished-at="2020-08-27T17:32:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_GenderDetail_invalid_langCode_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-002 --> master sync service language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.getGenderDtls(MasterSyncServiceImpl.java:364)
	at io.mosip.registration.test.MasterSyncGenderDetail.verifyGenderDetailByCode(MasterSyncGenderDetail.java:131)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_GenderDetail_invalid_langCode_empty -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:03Z" finished-at="2020-08-27T17:32:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncGenderDetail.verifyGenderDetailByCode(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:03Z" finished-at="2020-08-27T17:32:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_GenderDetail_validateBlackListedWord_smoke status=SUCCESS method=MasterSyncGenderDetail.verifyGenderDetailByCode(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24] output=io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-002 --> master sync service language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.getGenderDtls(MasterSyncServiceImpl.java:364)
	at io.mosip.registration.test.MasterSyncGenderDetail.verifyGenderDetailByCode(MasterSyncGenderDetail.java:131)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:03Z" finished-at="2020-08-27T17:32:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncGenderDetail.verifyGenderDetailByCode(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="setTestCaseName" is-config="true" duration-ms="4678" started-at="2020-08-27T17:32:03Z" finished-at="2020-08-27T17:32:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="verifyGenderDetailByCode(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="regClient_GenderDetail_invalid_langcode_notHavingValue" duration-ms="3450" started-at="2020-08-27T17:32:07Z" data-provider="GenderDetail" finished-at="2020-08-27T17:32:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_GenderDetail_invalid_langcode_notHavingValue]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_GenderDetail_invalid_langcode_notHavingValue -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:32:11Z" finished-at="2020-08-27T17:32:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_GenderDetail_invalid_langCode_empty status=SUCCESS method=MasterSyncGenderDetail.verifyGenderDetailByCode(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:11Z" finished-at="2020-08-27T17:32:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncGenderDetail.verifyGenderDetailByCode(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:32:11Z" finished-at="2020-08-27T17:32:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncGenderDetail.verifyGenderDetailByName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="setTestCaseName" is-config="true" duration-ms="4798" started-at="2020-08-27T17:32:11Z" finished-at="2020-08-27T17:32:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="verifyGenderDetailByName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="regClient_GenderDetail_validateBlackListedWord_smoke" duration-ms="3" started-at="2020-08-27T17:32:15Z" data-provider="GenderDetail" finished-at="2020-08-27T17:32:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_GenderDetail_validateBlackListedWord_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_GenderDetail_validateBlackListedWord_smoke -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="setTestCaseName" is-config="true" duration-ms="6842" started-at="2020-08-27T17:32:15Z" finished-at="2020-08-27T17:32:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:15Z" finished-at="2020-08-27T17:32:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncGenderDetail.verifyGenderDetailByName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:15Z" finished-at="2020-08-27T17:32:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncGenderDetail.verifyGenderDetailByName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:15Z" finished-at="2020-08-27T17:32:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_GenderDetail_invalid_langcode_notHavingValue status=SUCCESS method=MasterSyncGenderDetail.verifyGenderDetailByName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="verifyGenderDetailByName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="regClient_GenderDetail_invalid_langCode_empty" duration-ms="1" started-at="2020-08-27T17:32:22Z" data-provider="GenderDetail" finished-at="2020-08-27T17:32:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_GenderDetail_invalid_langCode_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-002 --> master sync service language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.getGenderDtls(MasterSyncServiceImpl.java:364)
	at io.mosip.registration.test.MasterSyncGenderDetail.verifyGenderDetailByName(MasterSyncGenderDetail.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_GenderDetail_invalid_langCode_empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:32:22Z" finished-at="2020-08-27T17:32:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_GenderDetail_validateBlackListedWord_smoke status=SUCCESS method=MasterSyncGenderDetail.verifyGenderDetailByName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24] output=io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-002 --> master sync service language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.getGenderDtls(MasterSyncServiceImpl.java:364)
	at io.mosip.registration.test.MasterSyncGenderDetail.verifyGenderDetailByName(MasterSyncGenderDetail.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="setTestCaseName" is-config="true" duration-ms="5162" started-at="2020-08-27T17:32:22Z" finished-at="2020-08-27T17:32:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:22Z" finished-at="2020-08-27T17:32:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncGenderDetail.verifyGenderDetailByName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:22Z" finished-at="2020-08-27T17:32:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncGenderDetail.verifyGenderDetailByName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="verifyGenderDetailByName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="regClient_GenderDetail_invalid_langcode_notHavingValue" duration-ms="8" started-at="2020-08-27T17:32:27Z" data-provider="GenderDetail" finished-at="2020-08-27T17:32:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_GenderDetail_invalid_langcode_notHavingValue]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_GenderDetail_invalid_langcode_notHavingValue -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:27Z" finished-at="2020-08-27T17:32:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:27Z" finished-at="2020-08-27T17:32:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_GenderDetail_invalid_langCode_empty status=SUCCESS method=MasterSyncGenderDetail.verifyGenderDetailByName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncGenderDetail@1787bc24]" test-instance-name="regClient_GenderDetail_invalid_langcode_notHavingValue" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:27Z" finished-at="2020-08-27T17:32:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncGenderDetail.verifyGenderDetailByName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- io.mosip.registration.test.MasterSyncGenderDetail -->
      <class name="io.mosip.registration.test.ZipCreationServiceTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:26Z" finished-at="2020-08-27T17:39:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" is-config="true" status="PASS" duration-ms="3" finished-at="2020-08-27T17:39:26Z" started-at="2020-08-27T17:39:26Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:26Z" finished-at="2020-08-27T17:39:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.ZipCreationServiceTest.createPacketCheckedExceptionTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="setUp" is-config="true" duration-ms="6955" started-at="2020-08-27T17:39:26Z" finished-at="2020-08-27T17:39:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="createPacketCheckedExceptionTest()[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="regClient_ZipCreationService_createPacketCheckedExceptionTest" duration-ms="3" started-at="2020-08-27T17:39:33Z" finished-at="2020-08-27T17:39:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_ZipCreationService_createPacketCheckedExceptionTest -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:39:33Z" finished-at="2020-08-27T17:39:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=ZipCreationServiceTest.createPacketCheckedExceptionTest()[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="setUp" is-config="true" duration-ms="4990" started-at="2020-08-27T17:39:33Z" finished-at="2020-08-27T17:39:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:33Z" finished-at="2020-08-27T17:39:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.ZipCreationServiceTest.createPacketcheckedExceptionEmptyFileInputTest() throws io.mosip.registration.exception.RegBaseCheckedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:33Z" finished-at="2020-08-27T17:39:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.ZipCreationServiceTest.createPacketCheckedExceptionTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:38Z" finished-at="2020-08-27T17:39:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.ZipCreationServiceTest.createPacketcheckedExceptionEmptyFileInputTest() throws io.mosip.registration.exception.RegBaseCheckedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="createPacketcheckedExceptionEmptyFileInputTest()[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="regClient_ZipCreationService_createPacketcheckedExceptionEmptyFileInputTest" duration-ms="0" started-at="2020-08-27T17:39:38Z" finished-at="2020-08-27T17:39:38Z">
          <reporter-output>
            <line>
              <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: PCC-ZCS-004 --> Map containing the generated files cannot be null or empty
	at io.mosip.registration.service.BaseService.throwRegBaseCheckedException(BaseService.java:361)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.validateInputData(ZipCreationServiceImpl.java:93)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.createPacket(ZipCreationServiceImpl.java:58)
	at io.mosip.registration.test.ZipCreationServiceTest.createPacketcheckedExceptionEmptyFileInputTest(ZipCreationServiceTest.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_ZipCreationService_createPacketcheckedExceptionEmptyFileInputTest -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:38Z" finished-at="2020-08-27T17:39:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_ZipCreationService_createPacketCheckedExceptionTest status=SUCCESS method=ZipCreationServiceTest.createPacketcheckedExceptionEmptyFileInputTest()[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b] output=io.mosip.registration.exception.RegBaseCheckedException: PCC-ZCS-004 --> Map containing the generated files cannot be null or empty
	at io.mosip.registration.service.BaseService.throwRegBaseCheckedException(BaseService.java:361)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.validateInputData(ZipCreationServiceImpl.java:93)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.createPacket(ZipCreationServiceImpl.java:58)
	at io.mosip.registration.test.ZipCreationServiceTest.createPacketcheckedExceptionEmptyFileInputTest(ZipCreationServiceTest.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:38Z" finished-at="2020-08-27T17:39:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.ZipCreationServiceTest.createPacketcheckedExceptionEmptyInputsTest() throws io.mosip.registration.exception.RegBaseCheckedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="setUp" is-config="true" duration-ms="6895" started-at="2020-08-27T17:39:38Z" finished-at="2020-08-27T17:39:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="createPacketcheckedExceptionEmptyInputsTest()[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="regClient_ZipCreationService_createPacketcheckedExceptionEmptyInputsTest" duration-ms="1" started-at="2020-08-27T17:39:45Z" finished-at="2020-08-27T17:39:45Z">
          <reporter-output>
            <line>
              <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: PCC-ZCS-004 --> Map containing the generated files cannot be null or empty
	at io.mosip.registration.service.BaseService.throwRegBaseCheckedException(BaseService.java:361)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.validateInputData(ZipCreationServiceImpl.java:93)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.createPacket(ZipCreationServiceImpl.java:58)
	at io.mosip.registration.test.ZipCreationServiceTest.createPacketcheckedExceptionEmptyInputsTest(ZipCreationServiceTest.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_ZipCreationService_createPacketcheckedExceptionEmptyInputsTest -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:45Z" finished-at="2020-08-27T17:39:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.ZipCreationServiceTest.createPacketcheckedExceptionIncompleteInputTest() throws io.mosip.registration.exception.RegBaseUncheckedException,io.mosip.registration.exception.RegBaseCheckedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:45Z" finished-at="2020-08-27T17:39:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_ZipCreationService_createPacketcheckedExceptionEmptyFileInputTest status=SUCCESS method=ZipCreationServiceTest.createPacketcheckedExceptionEmptyInputsTest()[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b] output=io.mosip.registration.exception.RegBaseCheckedException: PCC-ZCS-004 --> Map containing the generated files cannot be null or empty
	at io.mosip.registration.service.BaseService.throwRegBaseCheckedException(BaseService.java:361)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.validateInputData(ZipCreationServiceImpl.java:93)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.createPacket(ZipCreationServiceImpl.java:58)
	at io.mosip.registration.test.ZipCreationServiceTest.createPacketcheckedExceptionEmptyInputsTest(ZipCreationServiceTest.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="setUp" is-config="true" duration-ms="4918" started-at="2020-08-27T17:39:45Z" finished-at="2020-08-27T17:39:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:45Z" finished-at="2020-08-27T17:39:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.ZipCreationServiceTest.createPacketcheckedExceptionEmptyInputsTest() throws io.mosip.registration.exception.RegBaseCheckedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="createPacketcheckedExceptionIncompleteInputTest()[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="regClient_ZipCreationService_createPacketcheckedExceptionIncompleteInputTest" duration-ms="1" started-at="2020-08-27T17:39:50Z" finished-at="2020-08-27T17:39:50Z">
          <reporter-output>
            <line>
              <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: PCC-ZCS-004 --> Map containing the generated files cannot be null or empty
	at io.mosip.registration.service.BaseService.throwRegBaseCheckedException(BaseService.java:361)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.validateInputData(ZipCreationServiceImpl.java:93)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.createPacket(ZipCreationServiceImpl.java:58)
	at io.mosip.registration.test.ZipCreationServiceTest.createPacketcheckedExceptionIncompleteInputTest(ZipCreationServiceTest.java:161)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_ZipCreationService_createPacketcheckedExceptionIncompleteInputTest -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:50Z" finished-at="2020-08-27T17:39:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.ZipCreationServiceTest.createPacketcheckedExceptionIncompleteInputTest() throws io.mosip.registration.exception.RegBaseUncheckedException,io.mosip.registration.exception.RegBaseCheckedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:50Z" finished-at="2020-08-27T17:39:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_ZipCreationService_createPacketcheckedExceptionEmptyInputsTest status=SUCCESS method=ZipCreationServiceTest.createPacketcheckedExceptionIncompleteInputTest()[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b] output=io.mosip.registration.exception.RegBaseCheckedException: PCC-ZCS-004 --> Map containing the generated files cannot be null or empty
	at io.mosip.registration.service.BaseService.throwRegBaseCheckedException(BaseService.java:361)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.validateInputData(ZipCreationServiceImpl.java:93)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.createPacket(ZipCreationServiceImpl.java:58)
	at io.mosip.registration.test.ZipCreationServiceTest.createPacketcheckedExceptionIncompleteInputTest(ZipCreationServiceTest.java:161)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="setUp" is-config="true" duration-ms="4927" started-at="2020-08-27T17:39:50Z" finished-at="2020-08-27T17:39:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:50Z" finished-at="2020-08-27T17:39:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.ZipCreationServiceTest.createPacketcheckedExceptionNullInputTest() throws io.mosip.registration.exception.RegBaseCheckedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="createPacketcheckedExceptionNullInputTest()[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" duration-ms="1" started-at="2020-08-27T17:39:55Z" finished-at="2020-08-27T17:39:55Z">
          <reporter-output>
            <line>
              <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: PCC-ZCS-004 --> Map containing the generated files cannot be null or empty
	at io.mosip.registration.service.BaseService.throwRegBaseCheckedException(BaseService.java:361)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.validateInputData(ZipCreationServiceImpl.java:89)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.createPacket(ZipCreationServiceImpl.java:58)
	at io.mosip.registration.test.ZipCreationServiceTest.createPacketcheckedExceptionNullInputTest(ZipCreationServiceTest.java:131)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:55Z" finished-at="2020-08-27T17:39:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.ZipCreationServiceTest.createPacketcheckedExceptionNullInputTest() throws io.mosip.registration.exception.RegBaseCheckedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:55Z" finished-at="2020-08-27T17:39:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b]" test-instance-name="regClient_ZipCreationService_createPacketcheckedExceptionNullInputTest" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:39:55Z" finished-at="2020-08-27T17:39:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_ZipCreationService_createPacketcheckedExceptionIncompleteInputTest status=SUCCESS method=ZipCreationServiceTest.createPacketcheckedExceptionNullInputTest()[pri:0, instance:io.mosip.registration.test.ZipCreationServiceTest@11d8ae8b] output=io.mosip.registration.exception.RegBaseCheckedException: PCC-ZCS-004 --> Map containing the generated files cannot be null or empty
	at io.mosip.registration.service.BaseService.throwRegBaseCheckedException(BaseService.java:361)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.validateInputData(ZipCreationServiceImpl.java:89)
	at io.mosip.registration.service.external.impl.ZipCreationServiceImpl.createPacket(ZipCreationServiceImpl.java:58)
	at io.mosip.registration.test.ZipCreationServiceTest.createPacketcheckedExceptionNullInputTest(ZipCreationServiceTest.java:131)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.registration.test.ZipCreationServiceTest -->
      <class name="io.mosip.registration.test.MasterSyncBlackListedWord">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf]" test-instance-name="regClient_BlackListedWordService_invalid_langcode_notHavingValue" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2020-08-27T17:31:10Z" finished-at="2020-08-27T17:31:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_BlackListedWordService_invalid_langcode_notHavingValue" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf]" is-config="true" status="PASS" duration-ms="4" finished-at="2020-08-27T17:31:10Z" started-at="2020-08-27T17:31:10Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf]" test-instance-name="regClient_BlackListedWordService_invalid_langcode_notHavingValue" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:10Z" finished-at="2020-08-27T17:31:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncBlackListedWord.verifyBlackListedWords(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf]" test-instance-name="regClient_BlackListedWordService_invalid_langcode_notHavingValue" name="setTestCaseName" is-config="true" duration-ms="6001" started-at="2020-08-27T17:31:10Z" finished-at="2020-08-27T17:31:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="verifyBlackListedWords(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf]" test-instance-name="regClient_BlackListedWordService_invalid_langcode_notHavingValue" name="regClient_BlackListedWordService_validateBlackListedWord_smoke" duration-ms="14" started-at="2020-08-27T17:31:16Z" data-provider="BlackListedWords" finished-at="2020-08-27T17:31:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_BlackListedWordService_validateBlackListedWord_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_BlackListedWordService_validateBlackListedWord_smoke -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf]" test-instance-name="regClient_BlackListedWordService_invalid_langcode_notHavingValue" name="setTestCaseName" is-config="true" duration-ms="5056" started-at="2020-08-27T17:31:16Z" finished-at="2020-08-27T17:31:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf]" test-instance-name="regClient_BlackListedWordService_invalid_langcode_notHavingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:16Z" finished-at="2020-08-27T17:31:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=MasterSyncBlackListedWord.verifyBlackListedWords(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf]" test-instance-name="regClient_BlackListedWordService_invalid_langcode_notHavingValue" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:16Z" finished-at="2020-08-27T17:31:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncBlackListedWord.verifyBlackListedWords(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf]" test-instance-name="regClient_BlackListedWordService_invalid_langcode_notHavingValue" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:16Z" finished-at="2020-08-27T17:31:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncBlackListedWord.verifyBlackListedWords(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="verifyBlackListedWords(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf]" test-instance-name="regClient_BlackListedWordService_invalid_langcode_notHavingValue" name="regClient_BlackListedWordService_invalid_langCode_empty" duration-ms="5" started-at="2020-08-27T17:31:21Z" data-provider="BlackListedWords" finished-at="2020-08-27T17:31:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_BlackListedWordService_invalid_langCode_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-002 --> master sync service language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.getAllBlackListedWords(MasterSyncServiceImpl.java:335)
	at io.mosip.registration.test.MasterSyncBlackListedWord.verifyBlackListedWords(MasterSyncBlackListedWord.java:93)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_BlackListedWordService_invalid_langCode_empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf]" test-instance-name="regClient_BlackListedWordService_invalid_langcode_notHavingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:21Z" finished-at="2020-08-27T17:31:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_BlackListedWordService_validateBlackListedWord_smoke status=SUCCESS method=MasterSyncBlackListedWord.verifyBlackListedWords(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf] output=io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-002 --> master sync service language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.getAllBlackListedWords(MasterSyncServiceImpl.java:335)
	at io.mosip.registration.test.MasterSyncBlackListedWord.verifyBlackListedWords(MasterSyncBlackListedWord.java:93)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf]" test-instance-name="regClient_BlackListedWordService_invalid_langcode_notHavingValue" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:31:21Z" finished-at="2020-08-27T17:31:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncBlackListedWord.verifyBlackListedWords(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf]" test-instance-name="regClient_BlackListedWordService_invalid_langcode_notHavingValue" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:21Z" finished-at="2020-08-27T17:31:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncBlackListedWord.verifyBlackListedWords(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf]" test-instance-name="regClient_BlackListedWordService_invalid_langcode_notHavingValue" name="setTestCaseName" is-config="true" duration-ms="5575" started-at="2020-08-27T17:31:21Z" finished-at="2020-08-27T17:31:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="verifyBlackListedWords(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf]" test-instance-name="regClient_BlackListedWordService_invalid_langcode_notHavingValue" name="regClient_BlackListedWordService_invalid_langcode_notHavingValue" duration-ms="8" started-at="2020-08-27T17:31:27Z" data-provider="BlackListedWords" finished-at="2020-08-27T17:31:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_BlackListedWordService_invalid_langcode_notHavingValue]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_BlackListedWordService_invalid_langcode_notHavingValue -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf]" test-instance-name="regClient_BlackListedWordService_invalid_langcode_notHavingValue" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:27Z" finished-at="2020-08-27T17:31:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf]" test-instance-name="regClient_BlackListedWordService_invalid_langcode_notHavingValue" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:27Z" finished-at="2020-08-27T17:31:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncBlackListedWord.verifyBlackListedWords(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf]" test-instance-name="regClient_BlackListedWordService_invalid_langcode_notHavingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:27Z" finished-at="2020-08-27T17:31:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_BlackListedWordService_invalid_langCode_empty status=SUCCESS method=MasterSyncBlackListedWord.verifyBlackListedWords(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncBlackListedWord@329dbdbf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.registration.test.MasterSyncBlackListedWord -->
      <class name="io.mosip.registration.test.MasterSyncDocumentCategory">
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_DocumentCategory_invalid_langCode_notHavingValue" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640]" is-config="true" status="PASS" duration-ms="4" finished-at="2020-08-27T17:31:27Z" started-at="2020-08-27T17:31:27Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640]" test-instance-name="regClient_DocumentCategory_invalid_langCode_notHavingValue" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:27Z" finished-at="2020-08-27T17:31:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640]" test-instance-name="regClient_DocumentCategory_invalid_langCode_notHavingValue" name="setTestCaseName" is-config="true" duration-ms="8632" started-at="2020-08-27T17:31:27Z" finished-at="2020-08-27T17:31:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640]" test-instance-name="regClient_DocumentCategory_invalid_langCode_notHavingValue" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:27Z" finished-at="2020-08-27T17:31:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncDocumentCategory.verifyDocumentCatagory(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="verifyDocumentCatagory(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640]" test-instance-name="regClient_DocumentCategory_invalid_langCode_notHavingValue" name="regClient_DocumentCategory_validateDocumentCategory_smoke" duration-ms="14" started-at="2020-08-27T17:31:36Z" data-provider="documentCategory" finished-at="2020-08-27T17:31:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_DocumentCategory_validateDocumentCategory_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_DocumentCategory_validateDocumentCategory_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640]" test-instance-name="regClient_DocumentCategory_invalid_langCode_notHavingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:36Z" finished-at="2020-08-27T17:31:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=MasterSyncDocumentCategory.verifyDocumentCatagory(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640]" test-instance-name="regClient_DocumentCategory_invalid_langCode_notHavingValue" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:36Z" finished-at="2020-08-27T17:31:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncDocumentCategory.verifyDocumentCatagory(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640]" test-instance-name="regClient_DocumentCategory_invalid_langCode_notHavingValue" name="setTestCaseName" is-config="true" duration-ms="7072" started-at="2020-08-27T17:31:36Z" finished-at="2020-08-27T17:31:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640]" test-instance-name="regClient_DocumentCategory_invalid_langCode_notHavingValue" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:36Z" finished-at="2020-08-27T17:31:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncDocumentCategory.verifyDocumentCatagory(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="verifyDocumentCatagory(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640]" test-instance-name="regClient_DocumentCategory_invalid_langCode_notHavingValue" name="regClient_DocumentCategory_invalid_documentCode_notHavingValue" duration-ms="10" started-at="2020-08-27T17:31:43Z" data-provider="documentCategory" finished-at="2020-08-27T17:31:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_DocumentCategory_invalid_documentCode_notHavingValue]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_DocumentCategory_invalid_documentCode_notHavingValue -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640]" test-instance-name="regClient_DocumentCategory_invalid_langCode_notHavingValue" name="setTestCaseName" is-config="true" duration-ms="3621" started-at="2020-08-27T17:31:43Z" finished-at="2020-08-27T17:31:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640]" test-instance-name="regClient_DocumentCategory_invalid_langCode_notHavingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:43Z" finished-at="2020-08-27T17:31:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_DocumentCategory_validateDocumentCategory_smoke status=SUCCESS method=MasterSyncDocumentCategory.verifyDocumentCatagory(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640]" test-instance-name="regClient_DocumentCategory_invalid_langCode_notHavingValue" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:43Z" finished-at="2020-08-27T17:31:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncDocumentCategory.verifyDocumentCatagory(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640]" test-instance-name="regClient_DocumentCategory_invalid_langCode_notHavingValue" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:43Z" finished-at="2020-08-27T17:31:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncDocumentCategory.verifyDocumentCatagory(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="verifyDocumentCatagory(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640]" test-instance-name="regClient_DocumentCategory_invalid_langCode_notHavingValue" name="regClient_DocumentCategory_invalid_langCode_notHavingValue" duration-ms="16" started-at="2020-08-27T17:31:46Z" data-provider="documentCategory" finished-at="2020-08-27T17:31:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_DocumentCategory_invalid_langCode_notHavingValue]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_DocumentCategory_invalid_langCode_notHavingValue -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640]" test-instance-name="regClient_DocumentCategory_invalid_langCode_notHavingValue" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:46Z" finished-at="2020-08-27T17:31:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncDocumentCategory.verifyDocumentCatagory(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640]" test-instance-name="regClient_DocumentCategory_invalid_langCode_notHavingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:46Z" finished-at="2020-08-27T17:31:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_DocumentCategory_invalid_documentCode_notHavingValue status=SUCCESS method=MasterSyncDocumentCategory.verifyDocumentCatagory(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.MasterSyncDocumentCategory@43599640]" test-instance-name="regClient_DocumentCategory_invalid_langCode_notHavingValue" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:46Z" finished-at="2020-08-27T17:31:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- io.mosip.registration.test.MasterSyncDocumentCategory -->
      <class name="io.mosip.registration.test.LoginServiceUserDetailsTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.LoginServiceUserDetailsTest@51c693d]" test-instance-name="regClient_LoginService_validateUserDetails_smoke" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:07Z" finished-at="2020-08-27T17:31:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_LoginService_validateUserDetails_smoke" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.LoginServiceUserDetailsTest@51c693d]" is-config="true" status="PASS" duration-ms="5" finished-at="2020-08-27T17:31:07Z" started-at="2020-08-27T17:31:07Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.LoginServiceUserDetailsTest@51c693d]" test-instance-name="regClient_LoginService_validateUserDetails_smoke" name="setUp" is-config="true" duration-ms="3793" started-at="2020-08-27T17:31:07Z" finished-at="2020-08-27T17:31:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testGetUserDetails(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceUserDetailsTest@51c693d]" test-instance-name="regClient_LoginService_validateUserDetails_smoke" name="regClient_LoginService_validateUserDetails_smoke" duration-ms="16" started-at="2020-08-27T17:31:10Z" data-provider="userDetailsDataProvider" finished-at="2020-08-27T17:31:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LoginService_validateUserDetails_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_LoginService_validateUserDetails_smoke -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceUserDetailsTest@51c693d]" test-instance-name="regClient_LoginService_validateUserDetails_smoke" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:10Z" finished-at="2020-08-27T17:31:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceUserDetailsTest.testGetUserDetails(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.LoginServiceUserDetailsTest@51c693d]" test-instance-name="regClient_LoginService_validateUserDetails_smoke" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:10Z" finished-at="2020-08-27T17:31:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.LoginServiceUserDetailsTest@51c693d]" test-instance-name="regClient_LoginService_validateUserDetails_smoke" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:10Z" finished-at="2020-08-27T17:31:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=LoginServiceUserDetailsTest.testGetUserDetails(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceUserDetailsTest@51c693d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceUserDetailsTest@51c693d]" test-instance-name="regClient_LoginService_validateUserDetails_smoke" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:31:10Z" finished-at="2020-08-27T17:31:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceUserDetailsTest.testGetUserDetails(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- io.mosip.registration.test.LoginServiceUserDetailsTest -->
      <class name="io.mosip.registration.test.AuditServiceTest">
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" is-config="true" status="PASS" duration-ms="5" finished-at="2020-08-27T17:28:57Z" started-at="2020-08-27T17:28:57Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:57Z" finished-at="2020-08-27T17:28:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="preSetUp()[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="preSetUp" is-config="true" duration-ms="5150" started-at="2020-08-27T17:28:57Z" finished-at="2020-08-27T17:29:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preSetUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:29:02Z" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.AuditServiceTest.validateAuditLogs(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validateAuditLogs(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="regClient_AuditService_delete_AuditLogs_configuredAs_3days" duration-ms="28" started-at="2020-08-27T17:29:02Z" data-provider="AuditServiceDataProvider" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_AuditService_delete_AuditLogs_configuredAs_3days]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_AuditService_delete_AuditLogs_configuredAs_3days -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:02Z" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=AuditServiceTest.validateAuditLogs(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:02Z" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.AuditServiceTest.validateAuditLogs(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:02Z" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.AuditServiceTest.validateAuditLogs(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validateAuditLogs(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_currentDate" duration-ms="35" started-at="2020-08-27T17:29:02Z" data-provider="AuditServiceDataProvider" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_AuditService_delete_AuditLogs_configuredDaysAs_currentDate]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_AuditService_delete_AuditLogs_configuredDaysAs_currentDate -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:02Z" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.AuditServiceTest.validateAuditLogs(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validateAuditLogs(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_futureDays" duration-ms="36" started-at="2020-08-27T17:29:02Z" data-provider="AuditServiceDataProvider" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_AuditService_delete_AuditLogs_configuredDaysAs_futureDays]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_AuditService_delete_AuditLogs_configuredDaysAs_futureDays -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:02Z" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.AuditServiceTest.validateAuditLogs(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:02Z" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_AuditService_delete_AuditLogs_configuredAs_3days status=SUCCESS method=AuditServiceTest.validateAuditLogs(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:02Z" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_AuditService_delete_AuditLogs_configuredDaysAs_currentDate status=SUCCESS method=AuditServiceTest.validateAuditLogs(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:02Z" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.AuditServiceTest.validateAuditLogs(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:02Z" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.AuditServiceTest.validateAuditLogs(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validateAuditLogs(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NoLogs" duration-ms="8" started-at="2020-08-27T17:29:02Z" data-provider="AuditServiceDataProvider" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_AuditService_delete_AuditLogs_configuredDaysAs_NoLogs]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_AuditService_delete_AuditLogs_configuredDaysAs_NoLogs -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:29:02Z" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.AuditServiceTest.validateAuditLogs(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:02Z" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_AuditService_delete_AuditLogs_configuredDaysAs_futureDays status=SUCCESS method=AuditServiceTest.validateAuditLogs(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:02Z" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.AuditServiceTest.validateAuditLogs(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="validateAuditLogs(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" duration-ms="1" started-at="2020-08-27T17:29:02Z" data-provider="AuditServiceDataProvider" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:02Z" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.AuditServiceTest.validateAuditLogs(java.lang.String,org.json.JSONObject) throws org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:02Z" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_AuditService_delete_AuditLogs_configuredDaysAs_NoLogs status=SUCCESS method=AuditServiceTest.validateAuditLogs(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.AuditServiceTest@518caac3]" test-instance-name="regClient_AuditService_delete_AuditLogs_configuredDaysAs_NULL" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:02Z" finished-at="2020-08-27T17:29:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- io.mosip.registration.test.AuditServiceTest -->
      <class name="io.mosip.registration.test.TemplateServiceTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:28Z" finished-at="2020-08-27T17:37:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" is-config="true" status="PASS" duration-ms="4" finished-at="2020-08-27T17:37:28Z" started-at="2020-08-27T17:37:28Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:37:28Z" finished-at="2020-08-27T17:37:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setUp" is-config="true" duration-ms="4242" started-at="2020-08-27T17:37:28Z" finished-at="2020-08-27T17:37:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="getHtmlTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="regClient_TemplateService__HtmlTemplate_validateTemplateType_smoke" duration-ms="24" started-at="2020-08-27T17:37:32Z" data-provider="htmlTemplateProvider" finished-at="2020-08-27T17:37:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_TemplateService__HtmlTemplate_validateTemplateType_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_TemplateService__HtmlTemplate_validateTemplateType_smoke -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setUp" is-config="true" duration-ms="9125" started-at="2020-08-27T17:37:32Z" finished-at="2020-08-27T17:37:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:32Z" finished-at="2020-08-27T17:37:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:32Z" finished-at="2020-08-27T17:37:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=TemplateServiceTest.getHtmlTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:32Z" finished-at="2020-08-27T17:37:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="getHtmlTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="regClient_TemplateService__HtmlTemplate_invalidLangCode" duration-ms="12" started-at="2020-08-27T17:37:41Z" data-provider="htmlTemplateProvider" finished-at="2020-08-27T17:37:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_TemplateService__HtmlTemplate_invalidLangCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_TemplateService__HtmlTemplate_invalidLangCode -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setUp" is-config="true" duration-ms="8179" started-at="2020-08-27T17:37:41Z" finished-at="2020-08-27T17:37:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:41Z" finished-at="2020-08-27T17:37:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:41Z" finished-at="2020-08-27T17:37:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_TemplateService__HtmlTemplate_validateTemplateType_smoke status=SUCCESS method=TemplateServiceTest.getHtmlTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:41Z" finished-at="2020-08-27T17:37:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="getHtmlTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="regClient_TemplateService__HtmlTemplate_invalidLangCode_empty" duration-ms="4" started-at="2020-08-27T17:37:49Z" data-provider="htmlTemplateProvider" finished-at="2020-08-27T17:37:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_TemplateService__HtmlTemplate_invalidLangCode_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: PCC-TSI-001 --> Template Type Code / Language Code cannot be null
	at io.mosip.registration.service.template.impl.TemplateServiceImpl.getHtmlTemplate(TemplateServiceImpl.java:106)
	at io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(TemplateServiceTest.java:202)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_TemplateService__HtmlTemplate_invalidLangCode_empty -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:49Z" finished-at="2020-08-27T17:37:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setUp" is-config="true" duration-ms="7174" started-at="2020-08-27T17:37:49Z" finished-at="2020-08-27T17:37:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:49Z" finished-at="2020-08-27T17:37:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_TemplateService__HtmlTemplate_invalidLangCode status=SUCCESS method=TemplateServiceTest.getHtmlTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc] output=io.mosip.registration.exception.RegBaseCheckedException: PCC-TSI-001 --> Template Type Code / Language Code cannot be null
	at io.mosip.registration.service.template.impl.TemplateServiceImpl.getHtmlTemplate(TemplateServiceImpl.java:106)
	at io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(TemplateServiceTest.java:202)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:49Z" finished-at="2020-08-27T17:37:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="getHtmlTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="regClient_TemplateService__HtmlTemplate_invalidTemplateType" duration-ms="12" started-at="2020-08-27T17:37:57Z" data-provider="htmlTemplateProvider" finished-at="2020-08-27T17:37:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_TemplateService__HtmlTemplate_invalidTemplateType]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_TemplateService__HtmlTemplate_invalidTemplateType -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:57Z" finished-at="2020-08-27T17:37:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setUp" is-config="true" duration-ms="6134" started-at="2020-08-27T17:37:57Z" finished-at="2020-08-27T17:38:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:57Z" finished-at="2020-08-27T17:37:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_TemplateService__HtmlTemplate_invalidLangCode_empty status=SUCCESS method=TemplateServiceTest.getHtmlTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:57Z" finished-at="2020-08-27T17:37:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="getHtmlTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="regClient_TemplateService__HtmlTemplate_invalidTemplateTypeLangCode_empty" duration-ms="4" started-at="2020-08-27T17:38:03Z" data-provider="htmlTemplateProvider" finished-at="2020-08-27T17:38:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_TemplateService__HtmlTemplate_invalidTemplateTypeLangCode_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: PCC-TSI-001 --> Template Type Code / Language Code cannot be null
	at io.mosip.registration.service.template.impl.TemplateServiceImpl.getHtmlTemplate(TemplateServiceImpl.java:106)
	at io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(TemplateServiceTest.java:202)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_TemplateService__HtmlTemplate_invalidTemplateTypeLangCode_empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:38:03Z" finished-at="2020-08-27T17:38:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_TemplateService__HtmlTemplate_invalidTemplateType status=SUCCESS method=TemplateServiceTest.getHtmlTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc] output=io.mosip.registration.exception.RegBaseCheckedException: PCC-TSI-001 --> Template Type Code / Language Code cannot be null
	at io.mosip.registration.service.template.impl.TemplateServiceImpl.getHtmlTemplate(TemplateServiceImpl.java:106)
	at io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(TemplateServiceTest.java:202)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:03Z" finished-at="2020-08-27T17:38:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setUp" is-config="true" duration-ms="7138" started-at="2020-08-27T17:38:03Z" finished-at="2020-08-27T17:38:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:03Z" finished-at="2020-08-27T17:38:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="getHtmlTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="regClient_TemplateService__HtmlTemplate_invalidTemplateType_empty" duration-ms="6" started-at="2020-08-27T17:38:10Z" data-provider="htmlTemplateProvider" finished-at="2020-08-27T17:38:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_TemplateService__HtmlTemplate_invalidTemplateType_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: PCC-TSI-001 --> Template Type Code / Language Code cannot be null
	at io.mosip.registration.service.template.impl.TemplateServiceImpl.getHtmlTemplate(TemplateServiceImpl.java:106)
	at io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(TemplateServiceTest.java:202)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_TemplateService__HtmlTemplate_invalidTemplateType_empty -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setUp" is-config="true" duration-ms="5052" started-at="2020-08-27T17:38:10Z" finished-at="2020-08-27T17:38:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:10Z" finished-at="2020-08-27T17:38:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:10Z" finished-at="2020-08-27T17:38:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_TemplateService__HtmlTemplate_invalidTemplateTypeLangCode_empty status=SUCCESS method=TemplateServiceTest.getHtmlTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc] output=io.mosip.registration.exception.RegBaseCheckedException: PCC-TSI-001 --> Template Type Code / Language Code cannot be null
	at io.mosip.registration.service.template.impl.TemplateServiceImpl.getHtmlTemplate(TemplateServiceImpl.java:106)
	at io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(TemplateServiceTest.java:202)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:10Z" finished-at="2020-08-27T17:38:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getHtmlTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="getTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="regClient_TemplateService_validateTemplateType_smoke" duration-ms="314" started-at="2020-08-27T17:38:15Z" data-provider="templateProvider" finished-at="2020-08-27T17:38:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_TemplateService_validateTemplateType_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_TemplateService_validateTemplateType_smoke -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:15Z" finished-at="2020-08-27T17:38:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setUp" is-config="true" duration-ms="5052" started-at="2020-08-27T17:38:15Z" finished-at="2020-08-27T17:38:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:15Z" finished-at="2020-08-27T17:38:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:15Z" finished-at="2020-08-27T17:38:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_TemplateService__HtmlTemplate_invalidTemplateType_empty status=SUCCESS method=TemplateServiceTest.getTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="regClient_TemplateService_invalidLangCode" duration-ms="14" started-at="2020-08-27T17:38:20Z" data-provider="templateProvider" finished-at="2020-08-27T17:38:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_TemplateService_invalidLangCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_TemplateService_invalidLangCode -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:20Z" finished-at="2020-08-27T17:38:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_TemplateService_validateTemplateType_smoke status=SUCCESS method=TemplateServiceTest.getTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:20Z" finished-at="2020-08-27T17:38:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:20Z" finished-at="2020-08-27T17:38:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setUp" is-config="true" duration-ms="2909" started-at="2020-08-27T17:38:20Z" finished-at="2020-08-27T17:38:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="getTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="regClient_TemplateService_invalidLangCode_empty" duration-ms="14" started-at="2020-08-27T17:38:23Z" data-provider="templateProvider" finished-at="2020-08-27T17:38:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_TemplateService_invalidLangCode_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_TemplateService_invalidLangCode_empty -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:23Z" finished-at="2020-08-27T17:38:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:23Z" finished-at="2020-08-27T17:38:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:23Z" finished-at="2020-08-27T17:38:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_TemplateService_invalidLangCode status=SUCCESS method=TemplateServiceTest.getTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setUp" is-config="true" duration-ms="6964" started-at="2020-08-27T17:38:23Z" finished-at="2020-08-27T17:38:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="getTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="regClient_TemplateService_invalidTemplateType" duration-ms="22" started-at="2020-08-27T17:38:30Z" data-provider="templateProvider" finished-at="2020-08-27T17:38:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_TemplateService_invalidTemplateType]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_TemplateService_invalidTemplateType -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:38:30Z" finished-at="2020-08-27T17:38:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:30Z" finished-at="2020-08-27T17:38:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_TemplateService_invalidLangCode_empty status=SUCCESS method=TemplateServiceTest.getTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setUp" is-config="true" duration-ms="2945" started-at="2020-08-27T17:38:30Z" finished-at="2020-08-27T17:38:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:30Z" finished-at="2020-08-27T17:38:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="getTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="regClient_TemplateService_invalidTemplateTypeLangCode_empty" duration-ms="11" started-at="2020-08-27T17:38:33Z" data-provider="templateProvider" finished-at="2020-08-27T17:38:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_TemplateService_invalidTemplateTypeLangCode_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_TemplateService_invalidTemplateTypeLangCode_empty -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:33Z" finished-at="2020-08-27T17:38:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:33Z" finished-at="2020-08-27T17:38:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_TemplateService_invalidTemplateType status=SUCCESS method=TemplateServiceTest.getTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:33Z" finished-at="2020-08-27T17:38:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setUp" is-config="true" duration-ms="2846" started-at="2020-08-27T17:38:33Z" finished-at="2020-08-27T17:38:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="getTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="regClient_TemplateService_invalidTemplateType_empty" duration-ms="10" started-at="2020-08-27T17:38:36Z" data-provider="templateProvider" finished-at="2020-08-27T17:38:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_TemplateService_invalidTemplateType_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_TemplateService_invalidTemplateType_empty -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:36Z" finished-at="2020-08-27T17:38:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.TemplateServiceTest.getTemplateTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:36Z" finished-at="2020-08-27T17:38:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc]" test-instance-name="regClient_TemplateService_invalidTemplateType_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:38:36Z" finished-at="2020-08-27T17:38:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_TemplateService_invalidTemplateTypeLangCode_empty status=SUCCESS method=TemplateServiceTest.getTemplateTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.TemplateServiceTest@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.registration.test.TemplateServiceTest -->
      <class name="io.mosip.registration.test.LoginServiceLoginModesTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:40Z" finished-at="2020-08-27T17:28:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_LoginService_invalidRoleList_empty" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" is-config="true" status="PASS" duration-ms="5" finished-at="2020-08-27T17:28:40Z" started-at="2020-08-27T17:28:40Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="setUp" is-config="true" duration-ms="6697" started-at="2020-08-27T17:28:40Z" finished-at="2020-08-27T17:28:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:28:46Z" finished-at="2020-08-27T17:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceLoginModesTest.testModesOfLogin(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testModesOfLogin(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="regClient_LoginService_validateModesOfLogin_smoke" duration-ms="34" started-at="2020-08-27T17:28:46Z" data-provider="loginModesDataProvider" finished-at="2020-08-27T17:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LoginService_validateModesOfLogin_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_LoginService_validateModesOfLogin_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:46Z" finished-at="2020-08-27T17:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=LoginServiceLoginModesTest.testModesOfLogin(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:46Z" finished-at="2020-08-27T17:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceLoginModesTest.testModesOfLogin(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testModesOfLogin(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="regClient_LoginService_invalidAuthType" duration-ms="20" started-at="2020-08-27T17:28:46Z" data-provider="loginModesDataProvider" finished-at="2020-08-27T17:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LoginService_invalidAuthType]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_LoginService_invalidAuthType -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:46Z" finished-at="2020-08-27T17:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceLoginModesTest.testModesOfLogin(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:46Z" finished-at="2020-08-27T17:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_LoginService_validateModesOfLogin_smoke status=SUCCESS method=LoginServiceLoginModesTest.testModesOfLogin(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:46Z" finished-at="2020-08-27T17:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceLoginModesTest.testModesOfLogin(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:46Z" finished-at="2020-08-27T17:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceLoginModesTest.testModesOfLogin(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testModesOfLogin(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="regClient_LoginService_invalidAuthTypeRoleList" duration-ms="11" started-at="2020-08-27T17:28:46Z" data-provider="loginModesDataProvider" finished-at="2020-08-27T17:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LoginService_invalidAuthTypeRoleList]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_LoginService_invalidAuthTypeRoleList -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:46Z" finished-at="2020-08-27T17:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_LoginService_invalidAuthType status=SUCCESS method=LoginServiceLoginModesTest.testModesOfLogin(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:46Z" finished-at="2020-08-27T17:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceLoginModesTest.testModesOfLogin(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:28:46Z" finished-at="2020-08-27T17:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceLoginModesTest.testModesOfLogin(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testModesOfLogin(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="regClient_LoginService_invalidAuthType_empty" duration-ms="2" started-at="2020-08-27T17:28:46Z" data-provider="loginModesDataProvider" finished-at="2020-08-27T17:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LoginService_invalidAuthType_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_LoginService_invalidAuthType_empty -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:46Z" finished-at="2020-08-27T17:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceLoginModesTest.testModesOfLogin(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testModesOfLogin(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="regClient_LoginService_invalidRoleList_empty" duration-ms="11" started-at="2020-08-27T17:28:46Z" data-provider="loginModesDataProvider" finished-at="2020-08-27T17:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LoginService_invalidRoleList_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_LoginService_invalidRoleList_empty -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:46Z" finished-at="2020-08-27T17:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceLoginModesTest.testModesOfLogin(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:46Z" finished-at="2020-08-27T17:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_LoginService_invalidAuthTypeRoleList status=SUCCESS method=LoginServiceLoginModesTest.testModesOfLogin(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:46Z" finished-at="2020-08-27T17:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.LoginServiceLoginModesTest.testModesOfLogin(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:46Z" finished-at="2020-08-27T17:28:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8]" test-instance-name="regClient_LoginService_invalidRoleList_empty" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:28:46Z" finished-at="2020-08-27T17:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_LoginService_invalidAuthType_empty status=SUCCESS method=LoginServiceLoginModesTest.testModesOfLogin(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.LoginServiceLoginModesTest@4a3631f8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.registration.test.LoginServiceLoginModesTest -->
      <class name="io.mosip.registration.test.MasterSyncIndividualType">
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" is-config="true" status="PASS" duration-ms="4" finished-at="2020-08-27T17:32:27Z" started-at="2020-08-27T17:32:27Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:27Z" finished-at="2020-08-27T17:32:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="setTestCaseName" is-config="true" duration-ms="6869" started-at="2020-08-27T17:32:27Z" finished-at="2020-08-27T17:32:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:27Z" finished-at="2020-08-27T17:32:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncIndividualType.verifyIndividualTypeByName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="verifyIndividualTypeByName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="regClient_IndividualType_validateIndividualType_smoke" duration-ms="15" started-at="2020-08-27T17:32:34Z" data-provider="IndividualType" finished-at="2020-08-27T17:32:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_IndividualType_validateIndividualType_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_IndividualType_validateIndividualType_smoke -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:34Z" finished-at="2020-08-27T17:32:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncIndividualType.verifyIndividualTypeByName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="setTestCaseName" is-config="true" duration-ms="4104" started-at="2020-08-27T17:32:34Z" finished-at="2020-08-27T17:32:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:34Z" finished-at="2020-08-27T17:32:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=MasterSyncIndividualType.verifyIndividualTypeByName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:34Z" finished-at="2020-08-27T17:32:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncIndividualType.verifyIndividualTypeByName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="verifyIndividualTypeByName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="regClient_IndividualType_invalid_Code_empty" duration-ms="7" started-at="2020-08-27T17:32:38Z" data-provider="IndividualType" finished-at="2020-08-27T17:32:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_IndividualType_invalid_Code_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-003 --> master sync service code and language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.getIndividualType(MasterSyncServiceImpl.java:439)
	at io.mosip.registration.test.MasterSyncIndividualType.verifyIndividualTypeByName(MasterSyncIndividualType.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_IndividualType_invalid_Code_empty -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:38Z" finished-at="2020-08-27T17:32:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncIndividualType.verifyIndividualTypeByName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:38Z" finished-at="2020-08-27T17:32:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncIndividualType.verifyIndividualTypeByName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:38Z" finished-at="2020-08-27T17:32:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_IndividualType_validateIndividualType_smoke status=SUCCESS method=MasterSyncIndividualType.verifyIndividualTypeByName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae] output=io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-003 --> master sync service code and language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.getIndividualType(MasterSyncServiceImpl.java:439)
	at io.mosip.registration.test.MasterSyncIndividualType.verifyIndividualTypeByName(MasterSyncIndividualType.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="setTestCaseName" is-config="true" duration-ms="4556" started-at="2020-08-27T17:32:38Z" finished-at="2020-08-27T17:32:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="verifyIndividualTypeByName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="regClient_IndividualType_invalid_Code_notPresentInDB" duration-ms="11" started-at="2020-08-27T17:32:43Z" data-provider="IndividualType" finished-at="2020-08-27T17:32:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_IndividualType_invalid_Code_notPresentInDB]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_IndividualType_invalid_Code_notPresentInDB -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:43Z" finished-at="2020-08-27T17:32:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncIndividualType.verifyIndividualTypeByName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:43Z" finished-at="2020-08-27T17:32:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_IndividualType_invalid_Code_empty status=SUCCESS method=MasterSyncIndividualType.verifyIndividualTypeByName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="setTestCaseName" is-config="true" duration-ms="5350" started-at="2020-08-27T17:32:43Z" finished-at="2020-08-27T17:32:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:43Z" finished-at="2020-08-27T17:32:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncIndividualType.verifyIndividualTypeByName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="verifyIndividualTypeByName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="regClient_IndividualType_invalid_LangCode_empty" duration-ms="6" started-at="2020-08-27T17:32:48Z" data-provider="IndividualType" finished-at="2020-08-27T17:32:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_IndividualType_invalid_LangCode_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-003 --> master sync service code and language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.getIndividualType(MasterSyncServiceImpl.java:439)
	at io.mosip.registration.test.MasterSyncIndividualType.verifyIndividualTypeByName(MasterSyncIndividualType.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_IndividualType_invalid_LangCode_empty -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:48Z" finished-at="2020-08-27T17:32:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncIndividualType.verifyIndividualTypeByName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:48Z" finished-at="2020-08-27T17:32:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncIndividualType.verifyIndividualTypeByName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="setTestCaseName" is-config="true" duration-ms="6703" started-at="2020-08-27T17:32:48Z" finished-at="2020-08-27T17:32:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:48Z" finished-at="2020-08-27T17:32:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_IndividualType_invalid_Code_notPresentInDB status=SUCCESS method=MasterSyncIndividualType.verifyIndividualTypeByName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae] output=io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-003 --> master sync service code and language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.getIndividualType(MasterSyncServiceImpl.java:439)
	at io.mosip.registration.test.MasterSyncIndividualType.verifyIndividualTypeByName(MasterSyncIndividualType.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="verifyIndividualTypeByName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="regClient_IndividualType_invalid_langCode_notPresentInDB" duration-ms="11" started-at="2020-08-27T17:32:55Z" data-provider="IndividualType" finished-at="2020-08-27T17:32:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_IndividualType_invalid_langCode_notPresentInDB]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_IndividualType_invalid_langCode_notPresentInDB -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:32:55Z" finished-at="2020-08-27T17:32:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_IndividualType_invalid_LangCode_empty status=SUCCESS method=MasterSyncIndividualType.verifyIndividualTypeByName(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:55Z" finished-at="2020-08-27T17:32:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncIndividualType@24c4ddae]" test-instance-name="regClient_IndividualType_invalid_langCode_notPresentInDB" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:55Z" finished-at="2020-08-27T17:32:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncIndividualType.verifyIndividualTypeByName(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- io.mosip.registration.test.MasterSyncIndividualType -->
      <class name="io.mosip.registration.test.RegPacketStatusServiceSyncPacketsTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceSyncPacketsTest@6986852]" test-instance-name="regClient_RegpacketStatusService_sync_packets_to_server" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:34Z" finished-at="2020-08-27T17:36:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_RegpacketStatusService_sync_packets_to_server" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceSyncPacketsTest@6986852]" is-config="true" status="PASS" duration-ms="3" finished-at="2020-08-27T17:36:34Z" started-at="2020-08-27T17:36:34Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceSyncPacketsTest@6986852]" test-instance-name="regClient_RegpacketStatusService_sync_packets_to_server" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:34Z" finished-at="2020-08-27T17:36:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.RegPacketStatusServiceSyncPacketsTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setup()[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceSyncPacketsTest@6986852]" test-instance-name="regClient_RegpacketStatusService_sync_packets_to_server" name="setup" is-config="true" duration-ms="8654" started-at="2020-08-27T17:36:34Z" finished-at="2020-08-27T17:36:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceSyncPacketsTest@6986852]" test-instance-name="regClient_RegpacketStatusService_sync_packets_to_server" name="regClient_RegpacketStatusService_sync_packets_to_server" duration-ms="604" started-at="2020-08-27T17:36:43Z" data-provider="RegPacketStatusDataProvider" finished-at="2020-08-27T17:36:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_RegpacketStatusService_sync_packets_to_server]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_RegpacketStatusService_sync_packets_to_server -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceSyncPacketsTest@6986852]" test-instance-name="regClient_RegpacketStatusService_sync_packets_to_server" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:36:43Z" finished-at="2020-08-27T17:36:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=RegPacketStatusServiceSyncPacketsTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceSyncPacketsTest@6986852] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceSyncPacketsTest@6986852]" test-instance-name="regClient_RegpacketStatusService_sync_packets_to_server" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:43Z" finished-at="2020-08-27T17:36:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.RegPacketStatusServiceSyncPacketsTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceSyncPacketsTest@6986852]" test-instance-name="regClient_RegpacketStatusService_sync_packets_to_server" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:43Z" finished-at="2020-08-27T17:36:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- io.mosip.registration.test.RegPacketStatusServiceSyncPacketsTest -->
      <class name="io.mosip.registration.test.GlobalParamServiceTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.GlobalParamServiceTest@68f1b17f]" test-instance-name="regClient_GlobalParamService_synchConfigData" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:02Z" finished-at="2020-08-27T17:29:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_GlobalParamService_synchConfigData" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.GlobalParamServiceTest@68f1b17f]" is-config="true" status="PASS" duration-ms="4" finished-at="2020-08-27T17:29:02Z" started-at="2020-08-27T17:29:02Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.GlobalParamServiceTest@68f1b17f]" test-instance-name="regClient_GlobalParamService_synchConfigData" name="setUp" is-config="true" duration-ms="3796" started-at="2020-08-27T17:29:02Z" finished-at="2020-08-27T17:29:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.GlobalParamServiceTest@68f1b17f]" test-instance-name="regClient_GlobalParamService_synchConfigData" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:02Z" finished-at="2020-08-27T17:29:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.GlobalParamServiceTest.regClient_GlobalParamService_getGlobalParamsValues()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="regClient_GlobalParamService_getGlobalParamsValues()[pri:0, instance:io.mosip.registration.test.GlobalParamServiceTest@68f1b17f]" test-instance-name="regClient_GlobalParamService_synchConfigData" name="regClient_GlobalParamService_getGlobalParamsValues" duration-ms="20" started-at="2020-08-27T17:29:06Z" finished-at="2020-08-27T17:29:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_GlobalParamService_getGlobalParamsValues -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.GlobalParamServiceTest@68f1b17f]" test-instance-name="regClient_GlobalParamService_synchConfigData" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:29:06Z" finished-at="2020-08-27T17:29:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=GlobalParamServiceTest.regClient_GlobalParamService_getGlobalParamsValues()[pri:0, instance:io.mosip.registration.test.GlobalParamServiceTest@68f1b17f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.GlobalParamServiceTest@68f1b17f]" test-instance-name="regClient_GlobalParamService_synchConfigData" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:06Z" finished-at="2020-08-27T17:29:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.GlobalParamServiceTest.regClient_GlobalParamService_synchConfigData()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.GlobalParamServiceTest@68f1b17f]" test-instance-name="regClient_GlobalParamService_synchConfigData" name="setUp" is-config="true" duration-ms="5619" started-at="2020-08-27T17:29:06Z" finished-at="2020-08-27T17:29:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.GlobalParamServiceTest@68f1b17f]" test-instance-name="regClient_GlobalParamService_synchConfigData" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:06Z" finished-at="2020-08-27T17:29:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.GlobalParamServiceTest.regClient_GlobalParamService_getGlobalParamsValues()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="regClient_GlobalParamService_synchConfigData()[pri:0, instance:io.mosip.registration.test.GlobalParamServiceTest@68f1b17f]" test-instance-name="regClient_GlobalParamService_synchConfigData" name="regClient_GlobalParamService_synchConfigData" duration-ms="1062" started-at="2020-08-27T17:29:11Z" finished-at="2020-08-27T17:29:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_GlobalParamService_synchConfigData -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.GlobalParamServiceTest@68f1b17f]" test-instance-name="regClient_GlobalParamService_synchConfigData" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:12Z" finished-at="2020-08-27T17:29:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_GlobalParamService_getGlobalParamsValues status=SUCCESS method=GlobalParamServiceTest.regClient_GlobalParamService_synchConfigData()[pri:0, instance:io.mosip.registration.test.GlobalParamServiceTest@68f1b17f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.GlobalParamServiceTest@68f1b17f]" test-instance-name="regClient_GlobalParamService_synchConfigData" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:12Z" finished-at="2020-08-27T17:29:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.GlobalParamServiceTest@68f1b17f]" test-instance-name="regClient_GlobalParamService_synchConfigData" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:12Z" finished-at="2020-08-27T17:29:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.GlobalParamServiceTest.regClient_GlobalParamService_synchConfigData()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- io.mosip.registration.test.GlobalParamServiceTest -->
      <class name="io.mosip.registration.test.PreRegistrationDataSyncServiceTest">
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" is-config="true" status="PASS" duration-ms="9" finished-at="2020-08-27T17:34:45Z" started-at="2020-08-27T17:34:45Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:45Z" finished-at="2020-08-27T17:34:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="setTestCaseName" is-config="true" duration-ms="12559" started-at="2020-08-27T17:34:45Z" finished-at="2020-08-27T17:34:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:34:58Z" finished-at="2020-08-27T17:34:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.fetchAndDeleteRecordsTest() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="fetchAndDeleteRecordsTest()[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="regClient_PreRegistrationDataSyncService_fetchAndDeleteRecordsTest" duration-ms="19" started-at="2020-08-27T17:34:58Z" finished-at="2020-08-27T17:34:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PreRegistrationDataSyncService_fetchAndDeleteRecordsTest -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:58Z" finished-at="2020-08-27T17:34:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=PreRegistrationDataSyncServiceTest.fetchAndDeleteRecordsTest()[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:58Z" finished-at="2020-08-27T17:34:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.fetchAndDeleteRecordsTest() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="regClient_PreRegistrationDataSyncService_validate_getPreRegIds_smoke" duration-ms="18" started-at="2020-08-27T17:34:58Z" data-provider="preRegistrationIdsProvider" finished-at="2020-08-27T17:34:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PreRegistrationDataSyncService_validate_getPreRegIds_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PreRegistrationDataSyncService_validate_getPreRegIds_smoke -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:58Z" finished-at="2020-08-27T17:34:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:58Z" finished-at="2020-08-27T17:34:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:58Z" finished-at="2020-08-27T17:34:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PreRegistrationDataSyncService_fetchAndDeleteRecordsTest status=SUCCESS method=PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="regClient_PreRegistrationDataSyncService_invalid_langCode" duration-ms="626" started-at="2020-08-27T17:34:58Z" data-provider="preRegistrationIdsProvider" finished-at="2020-08-27T17:34:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PreRegistrationDataSyncService_invalid_langCode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PreRegistrationDataSyncService_invalid_langCode -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:58Z" finished-at="2020-08-27T17:34:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:34:58Z" finished-at="2020-08-27T17:34:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PreRegistrationDataSyncService_validate_getPreRegIds_smoke status=SUCCESS method=PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:58Z" finished-at="2020-08-27T17:34:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:34:58Z" finished-at="2020-08-27T17:34:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="regClient_PreRegistrationDataSyncService_invalid_regCenterId" duration-ms="1330" started-at="2020-08-27T17:34:58Z" data-provider="preRegistrationIdsProvider" finished-at="2020-08-27T17:35:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PreRegistrationDataSyncService_invalid_regCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PreRegistrationDataSyncService_invalid_regCenterId -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:35:00Z" finished-at="2020-08-27T17:35:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:00Z" finished-at="2020-08-27T17:35:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PreRegistrationDataSyncService_invalid_langCode status=SUCCESS method=PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="regClient_PreRegistrationDataSyncService_invalid_regCenterId_empty" duration-ms="471" started-at="2020-08-27T17:35:00Z" data-provider="preRegistrationIdsProvider" finished-at="2020-08-27T17:35:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PreRegistrationDataSyncService_invalid_regCenterId_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.service.sync.impl.PreRegistrationDataSyncServiceImpl.prepareDataSyncRequestDTO(PreRegistrationDataSyncServiceImpl.java:542)
	at io.mosip.registration.service.sync.impl.PreRegistrationDataSyncServiceImpl.getPreRegistrationIds(PreRegistrationDataSyncServiceImpl.java:116)
	at io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(PreRegistrationDataSyncServiceTest.java:252)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_PreRegistrationDataSyncService_invalid_regCenterId_empty -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:00Z" finished-at="2020-08-27T17:35:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:00Z" finished-at="2020-08-27T17:35:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PreRegistrationDataSyncService_invalid_regCenterId status=SUCCESS method=PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd] output=java.lang.NullPointerException
	at io.mosip.registration.service.sync.impl.PreRegistrationDataSyncServiceImpl.prepareDataSyncRequestDTO(PreRegistrationDataSyncServiceImpl.java:542)
	at io.mosip.registration.service.sync.impl.PreRegistrationDataSyncServiceImpl.getPreRegistrationIds(PreRegistrationDataSyncServiceImpl.java:116)
	at io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(PreRegistrationDataSyncServiceTest.java:252)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="regClient_PreRegistrationDataSyncService_invalid_regCenterId_null" duration-ms="302" started-at="2020-08-27T17:35:00Z" data-provider="preRegistrationIdsProvider" finished-at="2020-08-27T17:35:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PreRegistrationDataSyncService_invalid_regCenterId_null]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.service.sync.impl.PreRegistrationDataSyncServiceImpl.prepareDataSyncRequestDTO(PreRegistrationDataSyncServiceImpl.java:542)
	at io.mosip.registration.service.sync.impl.PreRegistrationDataSyncServiceImpl.getPreRegistrationIds(PreRegistrationDataSyncServiceImpl.java:116)
	at io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(PreRegistrationDataSyncServiceTest.java:252)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_PreRegistrationDataSyncService_invalid_regCenterId_null -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:00Z" finished-at="2020-08-27T17:35:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:00Z" finished-at="2020-08-27T17:35:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:35:00Z" finished-at="2020-08-27T17:35:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PreRegistrationDataSyncService_invalid_regCenterId_empty status=SUCCESS method=PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd] output=java.lang.NullPointerException
	at io.mosip.registration.service.sync.impl.PreRegistrationDataSyncServiceImpl.prepareDataSyncRequestDTO(PreRegistrationDataSyncServiceImpl.java:542)
	at io.mosip.registration.service.sync.impl.PreRegistrationDataSyncServiceImpl.getPreRegistrationIds(PreRegistrationDataSyncServiceImpl.java:116)
	at io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(PreRegistrationDataSyncServiceTest.java:252)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:00Z" finished-at="2020-08-27T17:35:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="regClient_PreRegistrationDataSyncService_invalid_regCenterId_space" duration-ms="1603" started-at="2020-08-27T17:35:00Z" data-provider="preRegistrationIdsProvider" finished-at="2020-08-27T17:35:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PreRegistrationDataSyncService_invalid_regCenterId_space]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PreRegistrationDataSyncService_invalid_regCenterId_space -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:00Z" finished-at="2020-08-27T17:35:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:02Z" finished-at="2020-08-27T17:35:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PreRegistrationDataSyncService_invalid_regCenterId_null status=SUCCESS method=PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:02Z" finished-at="2020-08-27T17:35:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:02Z" finished-at="2020-08-27T17:35:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="regClient_PreRegistrationDataSyncService_invalid_regCenterId_syncJobId_empty" duration-ms="6" started-at="2020-08-27T17:35:02Z" data-provider="preRegistrationIdsProvider" finished-at="2020-08-27T17:35:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PreRegistrationDataSyncService_invalid_regCenterId_syncJobId_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PreRegistrationDataSyncService_invalid_regCenterId_syncJobId_empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:35:02Z" finished-at="2020-08-27T17:35:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PreRegistrationDataSyncService_invalid_regCenterId_space status=SUCCESS method=PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:02Z" finished-at="2020-08-27T17:35:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:02Z" finished-at="2020-08-27T17:35:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="regClient_PreRegistrationDataSyncService_invalid_regCenterId_syncJobId_space" duration-ms="934" started-at="2020-08-27T17:35:02Z" data-provider="preRegistrationIdsProvider" finished-at="2020-08-27T17:35:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PreRegistrationDataSyncService_invalid_regCenterId_syncJobId_space]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PreRegistrationDataSyncService_invalid_regCenterId_syncJobId_space -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:03Z" finished-at="2020-08-27T17:35:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PreRegistrationDataSyncService_invalid_regCenterId_syncJobId_empty status=SUCCESS method=PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:35:03Z" finished-at="2020-08-27T17:35:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="regClient_PreRegistrationDataSyncService_invalid_syncJobId" duration-ms="2075" started-at="2020-08-27T17:35:03Z" data-provider="preRegistrationIdsProvider" finished-at="2020-08-27T17:35:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PreRegistrationDataSyncService_invalid_syncJobId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PreRegistrationDataSyncService_invalid_syncJobId -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:03Z" finished-at="2020-08-27T17:35:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:35:05Z" finished-at="2020-08-27T17:35:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:05Z" finished-at="2020-08-27T17:35:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PreRegistrationDataSyncService_invalid_regCenterId_syncJobId_space status=SUCCESS method=PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:05Z" finished-at="2020-08-27T17:35:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="regClient_PreRegistrationDataSyncService_invalid_syncJobId_empty" duration-ms="18" started-at="2020-08-27T17:35:05Z" data-provider="preRegistrationIdsProvider" finished-at="2020-08-27T17:35:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PreRegistrationDataSyncService_invalid_syncJobId_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PreRegistrationDataSyncService_invalid_syncJobId_empty -->
        <test-method status="PASS" signature="getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="regClient_PreRegistrationDataSyncService_invalid_syncJobId_null" duration-ms="11" started-at="2020-08-27T17:35:05Z" data-provider="preRegistrationIdsProvider" finished-at="2020-08-27T17:35:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PreRegistrationDataSyncService_invalid_syncJobId_null]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PreRegistrationDataSyncService_invalid_syncJobId_null -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:05Z" finished-at="2020-08-27T17:35:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:05Z" finished-at="2020-08-27T17:35:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PreRegistrationDataSyncService_invalid_syncJobId status=SUCCESS method=PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:05Z" finished-at="2020-08-27T17:35:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:05Z" finished-at="2020-08-27T17:35:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:05Z" finished-at="2020-08-27T17:35:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PreRegistrationDataSyncService_invalid_syncJobId_empty status=SUCCESS method=PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="regClient_PreRegistrationDataSyncService_invalid_syncJobId_regCenterId" duration-ms="3069" started-at="2020-08-27T17:35:05Z" data-provider="preRegistrationIdsProvider" finished-at="2020-08-27T17:35:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PreRegistrationDataSyncService_invalid_syncJobId_regCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PreRegistrationDataSyncService_invalid_syncJobId_regCenterId -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:05Z" finished-at="2020-08-27T17:35:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:35:08Z" finished-at="2020-08-27T17:35:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PreRegistrationDataSyncService_invalid_syncJobId_null status=SUCCESS method=PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:08Z" finished-at="2020-08-27T17:35:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:08Z" finished-at="2020-08-27T17:35:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="regClient_PreRegistrationDataSyncService_invalid_syncJobId_space" duration-ms="2081" started-at="2020-08-27T17:35:08Z" data-provider="preRegistrationIdsProvider" finished-at="2020-08-27T17:35:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PreRegistrationDataSyncService_invalid_syncJobId_space]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PreRegistrationDataSyncService_invalid_syncJobId_space -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:35:10Z" finished-at="2020-08-27T17:35:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PreRegistrationDataSyncService_invalid_syncJobId_regCenterId status=SUCCESS method=PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:10Z" finished-at="2020-08-27T17:35:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.getPreRegistrationIdsTest(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testDeletePreRegRecords(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="regClient_PreRegistrationDataSyncService_validate_deletePreRegRecords_smoke" duration-ms="9" started-at="2020-08-27T17:35:10Z" data-provider="deletePreregRecordsDataProvider" finished-at="2020-08-27T17:35:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PreRegistrationDataSyncService_validate_deletePreRegRecords_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657)
	at java.util.ArrayList.get(ArrayList.java:433)
	at io.mosip.registration.test.PreRegistrationDataSyncServiceTest.testDeletePreRegRecords(PreRegistrationDataSyncServiceTest.java:363)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_PreRegistrationDataSyncService_validate_deletePreRegRecords_smoke -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:10Z" finished-at="2020-08-27T17:35:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.testDeletePreRegRecords(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:10Z" finished-at="2020-08-27T17:35:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PreRegistrationDataSyncService_invalid_syncJobId_space status=SUCCESS method=PreRegistrationDataSyncServiceTest.testDeletePreRegRecords(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd] output=java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657)
	at java.util.ArrayList.get(ArrayList.java:433)
	at io.mosip.registration.test.PreRegistrationDataSyncServiceTest.testDeletePreRegRecords(PreRegistrationDataSyncServiceTest.java:363)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:10Z" finished-at="2020-08-27T17:35:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.testDeletePreRegRecords(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testDeletePreRegRecords(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="regClient_PreRegistrationDataSyncService_invalid_packetAge" duration-ms="9" started-at="2020-08-27T17:35:10Z" data-provider="deletePreregRecordsDataProvider" finished-at="2020-08-27T17:35:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_PreRegistrationDataSyncService_invalid_packetAge]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657)
	at java.util.ArrayList.get(ArrayList.java:433)
	at io.mosip.registration.test.PreRegistrationDataSyncServiceTest.testDeletePreRegRecords(PreRegistrationDataSyncServiceTest.java:363)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_PreRegistrationDataSyncService_invalid_packetAge -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:10Z" finished-at="2020-08-27T17:35:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.testDeletePreRegRecords(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:35:10Z" finished-at="2020-08-27T17:35:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PreRegistrationDataSyncService_validate_deletePreRegRecords_smoke status=SUCCESS method=PreRegistrationDataSyncServiceTest.testDeletePreRegRecords(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd] output=java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.rangeCheck(ArrayList.java:657)
	at java.util.ArrayList.get(ArrayList.java:433)
	at io.mosip.registration.test.PreRegistrationDataSyncServiceTest.testDeletePreRegRecords(PreRegistrationDataSyncServiceTest.java:363)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:10Z" finished-at="2020-08-27T17:35:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.testDeletePreRegRecords(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testGetPreRegistrationRecordForDeletion()[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="regClient_PreRegistrationDataSync_RecordForDeletion" duration-ms="3" started-at="2020-08-27T17:35:10Z" finished-at="2020-08-27T17:35:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_PreRegistrationDataSync_RecordForDeletion -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:10Z" finished-at="2020-08-27T17:35:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.testGetPreRegistrationRecordForDeletion()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:10Z" finished-at="2020-08-27T17:35:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.PreRegistrationDataSyncServiceTest.testGetPreRegistrationRecordForDeletion()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:10Z" finished-at="2020-08-27T17:35:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_PreRegistrationDataSyncService_invalid_packetAge status=SUCCESS method=PreRegistrationDataSyncServiceTest.testGetPreRegistrationRecordForDeletion()[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.PreRegistrationDataSyncServiceTest@404bbcbd]" test-instance-name="regClient_PreRegistrationDataSync_RecordForDeletion" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:10Z" finished-at="2020-08-27T17:35:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- io.mosip.registration.test.PreRegistrationDataSyncServiceTest -->
      <class name="io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest@797b0699]" test-instance-name="regClient_RegpacketStatusService_Delete_RegistrationPackets_created_10days_back" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2020-08-27T17:35:42Z" finished-at="2020-08-27T17:35:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_RegpacketStatusService_Delete_RegistrationPackets_created_10days_back" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest@797b0699]" is-config="true" status="PASS" duration-ms="4" finished-at="2020-08-27T17:35:42Z" started-at="2020-08-27T17:35:42Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest@797b0699]" test-instance-name="regClient_RegpacketStatusService_Delete_RegistrationPackets_created_10days_back" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:42Z" finished-at="2020-08-27T17:35:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest@797b0699]" test-instance-name="regClient_RegpacketStatusService_Delete_RegistrationPackets_created_10days_back" name="setTestCaseName" is-config="true" duration-ms="5459" started-at="2020-08-27T17:35:42Z" finished-at="2020-08-27T17:35:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest@797b0699]" test-instance-name="regClient_RegpacketStatusService_Delete_RegistrationPackets_created_10days_back" name="regClient_RegpacketStatusService_Delete_currently_created_RegistrationPackets" duration-ms="7262" started-at="2020-08-27T17:35:47Z" data-provider="RegPacketStatusDataProvider" finished-at="2020-08-27T17:35:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_RegpacketStatusService_Delete_currently_created_RegistrationPackets]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_RegpacketStatusService_Delete_currently_created_RegistrationPackets -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest@797b0699]" test-instance-name="regClient_RegpacketStatusService_Delete_RegistrationPackets_created_10days_back" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:54Z" finished-at="2020-08-27T17:35:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest@797b0699]" test-instance-name="regClient_RegpacketStatusService_Delete_RegistrationPackets_created_10days_back" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:54Z" finished-at="2020-08-27T17:35:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest@797b0699]" test-instance-name="regClient_RegpacketStatusService_Delete_RegistrationPackets_created_10days_back" name="setTestCaseName" is-config="true" duration-ms="6524" started-at="2020-08-27T17:35:54Z" finished-at="2020-08-27T17:36:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest@797b0699]" test-instance-name="regClient_RegpacketStatusService_Delete_RegistrationPackets_created_10days_back" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:35:54Z" finished-at="2020-08-27T17:35:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=RegPacketStatusServiceDeleteRegistrationTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest@797b0699] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest@797b0699]" test-instance-name="regClient_RegpacketStatusService_Delete_RegistrationPackets_created_10days_back" name="regClient_RegpacketStatusService_Delete_RegistrationPackets_created_10days_back" duration-ms="7280" started-at="2020-08-27T17:36:01Z" data-provider="RegPacketStatusDataProvider" finished-at="2020-08-27T17:36:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_RegpacketStatusService_Delete_RegistrationPackets_created_10days_back]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_RegpacketStatusService_Delete_RegistrationPackets_created_10days_back -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest@797b0699]" test-instance-name="regClient_RegpacketStatusService_Delete_RegistrationPackets_created_10days_back" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:08Z" finished-at="2020-08-27T17:36:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest@797b0699]" test-instance-name="regClient_RegpacketStatusService_Delete_RegistrationPackets_created_10days_back" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:08Z" finished-at="2020-08-27T17:36:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest.validatePacketCreation(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest@797b0699]" test-instance-name="regClient_RegpacketStatusService_Delete_RegistrationPackets_created_10days_back" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:08Z" finished-at="2020-08-27T17:36:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_RegpacketStatusService_Delete_currently_created_RegistrationPackets status=SUCCESS method=RegPacketStatusServiceDeleteRegistrationTest.validatePacketCreation(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest@797b0699] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.registration.test.RegPacketStatusServiceDeleteRegistrationTest -->
      <class name="io.mosip.registration.test.JobConfigurationTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:12Z" finished-at="2020-08-27T17:29:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" is-config="true" status="PASS" duration-ms="7" finished-at="2020-08-27T17:29:12Z" started-at="2020-08-27T17:29:12Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="setUp" is-config="true" duration-ms="5629" started-at="2020-08-27T17:29:12Z" finished-at="2020-08-27T17:29:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initiateJobsTest()[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="regClient_JobConfigurationService_initiateJobs" duration-ms="29" started-at="2020-08-27T17:29:18Z" finished-at="2020-08-27T17:29:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_JobConfigurationService_initiateJobs -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:18Z" finished-at="2020-08-27T17:29:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.JobConfigurationTest.initiateJobsTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:18Z" finished-at="2020-08-27T17:29:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.JobConfigurationTest.startSchedulerTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:18Z" finished-at="2020-08-27T17:29:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=JobConfigurationTest.initiateJobsTest()[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:18Z" finished-at="2020-08-27T17:29:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.JobConfigurationTest.initiateJobsTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="startSchedulerTest()[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="regClient_JobConfigurationService_startScheduler" duration-ms="1" started-at="2020-08-27T17:29:18Z" finished-at="2020-08-27T17:29:18Z">
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.JobConfigurationTest.startSchedulerTest(JobConfigurationTest.java:102)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_JobConfigurationService_startScheduler -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:18Z" finished-at="2020-08-27T17:29:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_JobConfigurationService_initiateJobs status=SUCCESS method=JobConfigurationTest.startSchedulerTest()[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3] output=java.lang.NullPointerException
	at io.mosip.registration.test.JobConfigurationTest.startSchedulerTest(JobConfigurationTest.java:102)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getCurrentRunningJobDetailsTest()[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="regClient_JobConfigurationService_getCurrentRunningJobDetails" duration-ms="26" started-at="2020-08-27T17:29:18Z" finished-at="2020-08-27T17:29:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_JobConfigurationService_getCurrentRunningJobDetails -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:18Z" finished-at="2020-08-27T17:29:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.JobConfigurationTest.getCurrentRunningJobDetailsTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:18Z" finished-at="2020-08-27T17:29:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.JobConfigurationTest.startSchedulerTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:18Z" finished-at="2020-08-27T17:29:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.JobConfigurationTest.getCurrentRunningJobDetailsTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:18Z" finished-at="2020-08-27T17:29:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_JobConfigurationService_startScheduler status=SUCCESS method=JobConfigurationTest.getCurrentRunningJobDetailsTest()[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="stopSchedulerTest()[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="regClient_JobConfigurationService_stopScheduler" duration-ms="0" started-at="2020-08-27T17:29:18Z" finished-at="2020-08-27T17:29:18Z">
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.test.JobConfigurationTest.stopSchedulerTest(JobConfigurationTest.java:162)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_JobConfigurationService_stopScheduler -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:29:18Z" finished-at="2020-08-27T17:29:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.JobConfigurationTest.getLastCompletedSyncJobsTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:18Z" finished-at="2020-08-27T17:29:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.JobConfigurationTest.stopSchedulerTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:18Z" finished-at="2020-08-27T17:29:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_JobConfigurationService_getCurrentRunningJobDetails status=SUCCESS method=JobConfigurationTest.stopSchedulerTest()[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3] output=java.lang.NullPointerException
	at io.mosip.registration.test.JobConfigurationTest.stopSchedulerTest(JobConfigurationTest.java:162)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:18Z" finished-at="2020-08-27T17:29:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.JobConfigurationTest.stopSchedulerTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="getLastCompletedSyncJobsTest()[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="regClient_JobConfigurationService_getLastCompletedSyncJobs" duration-ms="30777" started-at="2020-08-27T17:29:18Z" finished-at="2020-08-27T17:29:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_JobConfigurationService_getLastCompletedSyncJobs -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2020-08-27T17:29:49Z" finished-at="2020-08-27T17:29:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.JobConfigurationTest.getSyncJobsTransactionTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:49Z" finished-at="2020-08-27T17:29:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.JobConfigurationTest.getLastCompletedSyncJobsTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:29:49Z" finished-at="2020-08-27T17:29:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_JobConfigurationService_stopScheduler status=SUCCESS method=JobConfigurationTest.getLastCompletedSyncJobsTest()[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getSyncJobsTransactionTest()[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="regClient_JobConfigurationService_getSyncJobsTransaction" duration-ms="12263" started-at="2020-08-27T17:29:49Z" finished-at="2020-08-27T17:30:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_JobConfigurationService_getSyncJobsTransaction -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:01Z" finished-at="2020-08-27T17:30:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:01Z" finished-at="2020-08-27T17:30:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.JobConfigurationTest.getSyncJobsTransactionTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3]" test-instance-name="regClient_JobConfigurationService_getSyncJobsTransaction" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:30:01Z" finished-at="2020-08-27T17:30:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_JobConfigurationService_getLastCompletedSyncJobs status=SUCCESS method=JobConfigurationTest.getSyncJobsTransactionTest()[pri:0, instance:io.mosip.registration.test.JobConfigurationTest@14008db3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.registration.test.JobConfigurationTest -->
      <class name="io.mosip.registration.test.ReRegistrationServiceTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.ReRegistrationServiceTest@29a5f4e7]" test-instance-name="regClient_ReregistrationService_validate_updateReRegistrationStatusApprovedpacket" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:43Z" finished-at="2020-08-27T17:36:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_ReregistrationService_validate_updateReRegistrationStatusApprovedpacket" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.ReRegistrationServiceTest@29a5f4e7]" is-config="true" status="PASS" duration-ms="3" finished-at="2020-08-27T17:36:43Z" started-at="2020-08-27T17:36:43Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.ReRegistrationServiceTest@29a5f4e7]" test-instance-name="regClient_ReregistrationService_validate_updateReRegistrationStatusApprovedpacket" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:43Z" finished-at="2020-08-27T17:36:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.ReRegistrationServiceTest.getAllReRegistrationPacketsTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="SetUp()[pri:0, instance:io.mosip.registration.test.ReRegistrationServiceTest@29a5f4e7]" test-instance-name="regClient_ReregistrationService_validate_updateReRegistrationStatusApprovedpacket" name="SetUp" is-config="true" duration-ms="3614" started-at="2020-08-27T17:36:43Z" finished-at="2020-08-27T17:36:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method status="PASS" signature="getAllReRegistrationPacketsTest()[pri:0, instance:io.mosip.registration.test.ReRegistrationServiceTest@29a5f4e7]" test-instance-name="regClient_ReregistrationService_validate_updateReRegistrationStatusApprovedpacket" name="regClient_ReregistrationService_validate_getAllReRegistrationPackets" duration-ms="73" started-at="2020-08-27T17:36:47Z" finished-at="2020-08-27T17:36:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_ReregistrationService_validate_getAllReRegistrationPackets -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.ReRegistrationServiceTest@29a5f4e7]" test-instance-name="regClient_ReregistrationService_validate_updateReRegistrationStatusApprovedpacket" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:47Z" finished-at="2020-08-27T17:36:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.ReRegistrationServiceTest.getAllReRegistrationPacketsTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.ReRegistrationServiceTest@29a5f4e7]" test-instance-name="regClient_ReregistrationService_validate_updateReRegistrationStatusApprovedpacket" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:47Z" finished-at="2020-08-27T17:36:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=ReRegistrationServiceTest.getAllReRegistrationPacketsTest()[pri:0, instance:io.mosip.registration.test.ReRegistrationServiceTest@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.ReRegistrationServiceTest@29a5f4e7]" test-instance-name="regClient_ReregistrationService_validate_updateReRegistrationStatusApprovedpacket" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:47Z" finished-at="2020-08-27T17:36:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.ReRegistrationServiceTest.updateReRegistrationStatusApprovedpacket() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="SetUp()[pri:0, instance:io.mosip.registration.test.ReRegistrationServiceTest@29a5f4e7]" test-instance-name="regClient_ReregistrationService_validate_updateReRegistrationStatusApprovedpacket" name="SetUp" is-config="true" duration-ms="4454" started-at="2020-08-27T17:36:47Z" finished-at="2020-08-27T17:36:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method status="PASS" signature="updateReRegistrationStatusApprovedpacket()[pri:0, instance:io.mosip.registration.test.ReRegistrationServiceTest@29a5f4e7]" test-instance-name="regClient_ReregistrationService_validate_updateReRegistrationStatusApprovedpacket" name="regClient_ReregistrationService_validate_updateReRegistrationStatusApprovedpacket" duration-ms="25" started-at="2020-08-27T17:36:51Z" finished-at="2020-08-27T17:36:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_ReregistrationService_validate_updateReRegistrationStatusApprovedpacket -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.ReRegistrationServiceTest@29a5f4e7]" test-instance-name="regClient_ReregistrationService_validate_updateReRegistrationStatusApprovedpacket" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:51Z" finished-at="2020-08-27T17:36:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.ReRegistrationServiceTest@29a5f4e7]" test-instance-name="regClient_ReregistrationService_validate_updateReRegistrationStatusApprovedpacket" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:51Z" finished-at="2020-08-27T17:36:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.ReRegistrationServiceTest.updateReRegistrationStatusApprovedpacket() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.ReRegistrationServiceTest@29a5f4e7]" test-instance-name="regClient_ReregistrationService_validate_updateReRegistrationStatusApprovedpacket" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:36:51Z" finished-at="2020-08-27T17:36:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_ReregistrationService_validate_getAllReRegistrationPackets status=SUCCESS method=ReRegistrationServiceTest.updateReRegistrationStatusApprovedpacket()[pri:0, instance:io.mosip.registration.test.ReRegistrationServiceTest@29a5f4e7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.registration.test.ReRegistrationServiceTest -->
      <class name="io.mosip.registration.test.StorageServiceTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.StorageServiceTest@58594a11]" test-instance-name="regClient_StorageService_NoFolderToStore_Packet" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:17Z" finished-at="2020-08-27T17:37:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_StorageService_NoFolderToStore_Packet" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.StorageServiceTest@58594a11]" is-config="true" status="PASS" duration-ms="3" finished-at="2020-08-27T17:37:17Z" started-at="2020-08-27T17:37:17Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.StorageServiceTest@58594a11]" test-instance-name="regClient_StorageService_NoFolderToStore_Packet" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:17Z" finished-at="2020-08-27T17:37:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.StorageServiceTest.validateStoreToDisk(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.StorageServiceTest@58594a11]" test-instance-name="regClient_StorageService_NoFolderToStore_Packet" name="setUp" is-config="true" duration-ms="3471" started-at="2020-08-27T17:37:17Z" finished-at="2020-08-27T17:37:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="validateStoreToDisk(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.StorageServiceTest@58594a11]" test-instance-name="regClient_StorageService_NoFolderToStore_Packet" name="regClient_StorageService_NewFolderToStore_Packet" duration-ms="28" started-at="2020-08-27T17:37:20Z" data-provider="StorageServiceDataProvider" finished-at="2020-08-27T17:37:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_StorageService_NewFolderToStore_Packet]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.util.CommonUtil.verifyIfFileExist(CommonUtil.java:261)
	at io.mosip.registration.test.StorageServiceTest.validateStoreToDisk(StorageServiceTest.java:133)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_StorageService_NewFolderToStore_Packet -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.StorageServiceTest@58594a11]" test-instance-name="regClient_StorageService_NoFolderToStore_Packet" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:20Z" finished-at="2020-08-27T17:37:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.StorageServiceTest.validateStoreToDisk(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.StorageServiceTest@58594a11]" test-instance-name="regClient_StorageService_NoFolderToStore_Packet" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:20Z" finished-at="2020-08-27T17:37:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=StorageServiceTest.validateStoreToDisk(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.StorageServiceTest@58594a11] output=java.lang.NullPointerException
	at io.mosip.registration.util.CommonUtil.verifyIfFileExist(CommonUtil.java:261)
	at io.mosip.registration.test.StorageServiceTest.validateStoreToDisk(StorageServiceTest.java:133)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:io.mosip.registration.test.StorageServiceTest@58594a11]" test-instance-name="regClient_StorageService_NoFolderToStore_Packet" name="setUp" is-config="true" duration-ms="3139" started-at="2020-08-27T17:37:20Z" finished-at="2020-08-27T17:37:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.StorageServiceTest@58594a11]" test-instance-name="regClient_StorageService_NoFolderToStore_Packet" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:20Z" finished-at="2020-08-27T17:37:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.StorageServiceTest.validateStoreToDisk(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="validateStoreToDisk(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.StorageServiceTest@58594a11]" test-instance-name="regClient_StorageService_NoFolderToStore_Packet" name="regClient_StorageService_NoFolderToStore_Packet" duration-ms="14" started-at="2020-08-27T17:37:23Z" data-provider="StorageServiceDataProvider" finished-at="2020-08-27T17:37:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_StorageService_NoFolderToStore_Packet]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[java.lang.NullPointerException
	at io.mosip.registration.util.CommonUtil.verifyIfFileExist(CommonUtil.java:261)
	at io.mosip.registration.test.StorageServiceTest.validateStoreToDisk(StorageServiceTest.java:133)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_StorageService_NoFolderToStore_Packet -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.StorageServiceTest@58594a11]" test-instance-name="regClient_StorageService_NoFolderToStore_Packet" name="springTestContextAfterTestClass" is-config="true" duration-ms="1" started-at="2020-08-27T17:37:23Z" finished-at="2020-08-27T17:37:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.StorageServiceTest@58594a11]" test-instance-name="regClient_StorageService_NoFolderToStore_Packet" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:23Z" finished-at="2020-08-27T17:37:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.StorageServiceTest.validateStoreToDisk(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.StorageServiceTest@58594a11]" test-instance-name="regClient_StorageService_NoFolderToStore_Packet" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:37:23Z" finished-at="2020-08-27T17:37:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_StorageService_NewFolderToStore_Packet status=SUCCESS method=StorageServiceTest.validateStoreToDisk(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.StorageServiceTest@58594a11] output=java.lang.NullPointerException
	at io.mosip.registration.util.CommonUtil.verifyIfFileExist(CommonUtil.java:261)
	at io.mosip.registration.test.StorageServiceTest.validateStoreToDisk(StorageServiceTest.java:133)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.registration.test.StorageServiceTest -->
      <class name="io.mosip.registration.test.MasterSyncLocationByHierarchyCode">
        <test-method name="springTestContextPrepareTestInstance" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" signature="springTestContextPrepareTestInstance()[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" is-config="true" status="PASS" duration-ms="5" finished-at="2020-08-27T17:32:55Z" started-at="2020-08-27T17:32:55Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:55Z" finished-at="2020-08-27T17:32:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="setTestCaseName" is-config="true" duration-ms="7717" started-at="2020-08-27T17:32:55Z" finished-at="2020-08-27T17:33:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:32:55Z" finished-at="2020-08-27T17:32:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="verifyLocationByHierarchyCode(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="regClient_LocationByHierarchyCode_validateLocationByHierarchyCode_smoke" duration-ms="12" started-at="2020-08-27T17:33:03Z" data-provider="LocationByHierarchyCode" finished-at="2020-08-27T17:33:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LocationByHierarchyCode_validateLocationByHierarchyCode_smoke]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_LocationByHierarchyCode_validateLocationByHierarchyCode_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="setResultTestName" is-config="true" duration-ms="1" started-at="2020-08-27T17:33:03Z" finished-at="2020-08-27T17:33:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:33:03Z" finished-at="2020-08-27T17:33:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="setTestCaseName" is-config="true" duration-ms="6871" started-at="2020-08-27T17:33:03Z" finished-at="2020-08-27T17:33:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:33:03Z" finished-at="2020-08-27T17:33:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="verifyLocationByHierarchyCode(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="regClient_LocationByHierarchyCode_invalid_hierarchyName_empty" duration-ms="9" started-at="2020-08-27T17:33:10Z" data-provider="LocationByHierarchyCode" finished-at="2020-08-27T17:33:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LocationByHierarchyCode_invalid_hierarchyName_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-003 --> master sync service code and language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.findProvianceByHierarchyCode(MasterSyncServiceImpl.java:259)
	at io.mosip.registration.test.MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(MasterSyncLocationByHierarchyCode.java:154)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_LocationByHierarchyCode_invalid_hierarchyName_empty -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:33:10Z" finished-at="2020-08-27T17:33:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="setTestCaseName" is-config="true" duration-ms="5771" started-at="2020-08-27T17:33:10Z" finished-at="2020-08-27T17:33:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:33:10Z" finished-at="2020-08-27T17:33:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:33:10Z" finished-at="2020-08-27T17:33:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_LocationByHierarchyCode_validateLocationByHierarchyCode_smoke status=SUCCESS method=MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499] output=io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-003 --> master sync service code and language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.findProvianceByHierarchyCode(MasterSyncServiceImpl.java:259)
	at io.mosip.registration.test.MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(MasterSyncLocationByHierarchyCode.java:154)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="verifyLocationByHierarchyCode(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="regClient_LocationByHierarchyCode_invalid_hierarchyName_notPresentInDB" duration-ms="14" started-at="2020-08-27T17:33:16Z" data-provider="LocationByHierarchyCode" finished-at="2020-08-27T17:33:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LocationByHierarchyCode_invalid_hierarchyName_notPresentInDB]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_LocationByHierarchyCode_invalid_hierarchyName_notPresentInDB -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:33:16Z" finished-at="2020-08-27T17:33:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="setTestCaseName" is-config="true" duration-ms="7132" started-at="2020-08-27T17:33:16Z" finished-at="2020-08-27T17:33:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:33:16Z" finished-at="2020-08-27T17:33:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_LocationByHierarchyCode_invalid_hierarchyName_empty status=SUCCESS method=MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:33:16Z" finished-at="2020-08-27T17:33:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="verifyLocationByHierarchyCode(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="regClient_LocationByHierarchyCode_invalid_langCode_empty" duration-ms="6" started-at="2020-08-27T17:33:23Z" data-provider="LocationByHierarchyCode" finished-at="2020-08-27T17:33:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LocationByHierarchyCode_invalid_langCode_empty]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-003 --> master sync service code and language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.findProvianceByHierarchyCode(MasterSyncServiceImpl.java:259)
	at io.mosip.registration.test.MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(MasterSyncLocationByHierarchyCode.java:154)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]>
            </line>
          </reporter-output>
        </test-method> <!-- regClient_LocationByHierarchyCode_invalid_langCode_empty -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:33:23Z" finished-at="2020-08-27T17:33:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_LocationByHierarchyCode_invalid_hierarchyName_notPresentInDB status=SUCCESS method=MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499] output=io.mosip.registration.exception.RegBaseCheckedException: REG-MSS-003 --> master sync service code and language code mandatory fields is missing.
	at io.mosip.registration.service.sync.impl.MasterSyncServiceImpl.findProvianceByHierarchyCode(MasterSyncServiceImpl.java:259)
	at io.mosip.registration.test.MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(MasterSyncLocationByHierarchyCode.java:154)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:182)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)
	at sun.reflect.GeneratedMethodAccessor496.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:194)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:707)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:60)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:45)
]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:33:23Z" finished-at="2020-08-27T17:33:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:33:23Z" finished-at="2020-08-27T17:33:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="setTestCaseName()[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="setTestCaseName" is-config="true" duration-ms="3665" started-at="2020-08-27T17:33:23Z" finished-at="2020-08-27T17:33:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setTestCaseName -->
        <test-method status="PASS" signature="verifyLocationByHierarchyCode(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" duration-ms="17" started-at="2020-08-27T17:33:26Z" data-provider="LocationByHierarchyCode" finished-at="2020-08-27T17:33:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2020-08-27T17:33:26Z" finished-at="2020-08-27T17:33:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="setResultTestName" is-config="true" duration-ms="0" started-at="2020-08-27T17:33:26Z" finished-at="2020-08-27T17:33:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=regClient_LocationByHierarchyCode_invalid_langCode_empty status=SUCCESS method=MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(java.lang.String, org.json.JSONObject)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:io.mosip.registration.test.MasterSyncLocationByHierarchyCode@7f8a9499]" test-instance-name="regClient_LocationByHierarchyCode_invalid_langCode_notPresentInDB" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2020-08-27T17:33:26Z" finished-at="2020-08-27T17:33:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.registration.test.MasterSyncLocationByHierarchyCode.verifyLocationByHierarchyCode(java.lang.String,org.json.JSONObject)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- io.mosip.registration.test.MasterSyncLocationByHierarchyCode -->
    </test> <!-- Registration Services Test -->
  </suite> <!-- Registration Services Automation Suite -->
</testng-results>
